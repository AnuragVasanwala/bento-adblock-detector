{
  "version": 3,
  "sources": ["../src/core/data-structures/promise.js", "../src/core/types/array.js", "../src/core/types/object/index.js", "../src/core/types/index.js", "../src/core/types/function/index.js", "../src/core/types/object/json.js", "../src/core/dom/event-helper-listen.js", "../src/core/mode/prod.js", "../src/core/mode/test.js", "../src/core/mode/local-dev.js", "../src/core/mode/version.js", "../src/core/mode/esm.js", "../third_party/css-escape/css-escape.js", "../src/core/types/string/url.js", "../src/config.js", "../src/mode.js", "../src/utils/log.js", "../src/utils/event-helper.js", "../src/video-iframe-integration.js"],
  "sourcesContent": ["let resolved;\n\n/**\n * Returns a cached resolved promise.\n * Babel converts direct calls to Promise.resolve() (with no arguments) into\n * calls to this.\n *\n * @return {!Promise<undefined>}\n */\nexport function resolvedPromise() {\n  if (resolved) {\n    return resolved;\n  }\n\n  // It's important that we call with `undefined` here, to prevent a transform\n  // recursion. If we didn't pass an arg, then the transformer would replace\n  // this callsite with a call to `resolvedPromise()`.\n  resolved = Promise.resolve(undefined);\n  return resolved;\n}\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /** Constructor. */\n  constructor() {\n    /** @const {!Promise<T>} */\n    this.promise = new /*OK*/ Promise((res, rej) => {\n      /** @const {function(T=)} */\n      this.resolve = res;\n      /** @const {function(*=)} */\n      this.reject = rej;\n    });\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise((resolve) => {\n    resolve(fn());\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!IThenable>=} opt_promises\n   */\n  constructor(opt_promises) {\n    /** @private @const {!Deferred} */\n    this.deferred_ = new Deferred();\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (const promise of opt_promises) {\n        this.add(promise);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!IThenable} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    promise.then(\n      (result) => {\n        if (this.count_ === countAtAdd) {\n          this.deferred_.resolve(result);\n        }\n      },\n      (error) => {\n        // Don't follow behavior of Promise.all and Promise.race error so that\n        // this will only reject when most recently added promise fails.\n        if (this.count_ === countAtAdd) {\n          this.deferred_.reject(error);\n        }\n      }\n    );\n    return this.deferred_.promise;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.deferred_.promise.then(opt_resolve, opt_reject);\n  }\n}\n", "/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  return arrayLike ? Array.prototype.slice.call(arrayLike) : [];\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport const {isArray} = Array;\n\n/**\n * If the specified argument is an array, it's returned as is. If it's a\n * single item, the array containing this item is created and returned.\n *\n * The double-template pattern here solves a bug where CC can be passed a value\n * with declared type {string|!Array<string>} and return a value with a type of\n * {!Array<string|Array<string>>}.\n *\n * @param {!Array<T>|S} arrayOrSingleItem\n * @return {!Array<T>|!Array<S>}\n * @template S\n * @template T\n */\nexport function arrayOrSingleItemToArray(arrayOrSingleItem) {\n  return isArray(arrayOrSingleItem)\n    ? /** @type {!Array<T>} */ (arrayOrSingleItem)\n    : [/** @type {!S} */ (arrayOrSingleItem)];\n}\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order. Note that it does NOT handle NaN case as expected.\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Removes elements that shouldRemove returns true for from the array.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} shouldRemove\n * @return {!Array<T>}\n * @template T\n */\nexport function remove(array, shouldRemove) {\n  const removed = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (shouldRemove(item, i, array)) {\n      removed.push(item);\n    } else {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    }\n  }\n  if (index < array.length) {\n    array.length = index;\n  }\n  return removed;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes the first matching item in the array. Returns `true` if the array\n * has changed.\n *\n * @param {!Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function removeItem(array, item) {\n  const index = array.indexOf(item);\n  if (index == -1) {\n    return false;\n  }\n  array.splice(index, 1);\n  return true;\n}\n\n/**\n * Returns the last item in an array.\n *\n * @param {Array<T>} array\n * @template T\n * @return {?T}\n */\nexport function lastItem(array) {\n  return array[array.length - 1];\n}\n", "/* @const */\nconst {hasOwnProperty: hasOwn_, toString: toString_} = Object.prototype;\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString_.call(value) === '[object Object]';\n}\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {d, s, t} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    for (const key of Object.keys(s)) {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          continue;\n        }\n      }\n      t[key] = newValue;\n    }\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * @param {!Object|null|undefined} o1\n * @param {!Object|null|undefined} o2\n * @return {boolean}\n */\nexport function objectsEqualShallow(o1, o2) {\n  if (o1 == null || o2 == null) {\n    // Null is only equal to null, and undefined to undefined.\n    return o1 === o2;\n  }\n\n  for (const k in o1) {\n    if (o1[k] !== o2[k]) {\n      return false;\n    }\n  }\n  for (const k in o2) {\n    if (o2[k] !== o1[k]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {T} obj\n * @param {string} prop\n * @param {function(T, string):R} factory\n * @return {R}\n * @template T,R\n */\nexport function memo(obj, prop, factory) {\n  let result = /** @type {?R} */ (obj[prop]);\n  if (result === undefined) {\n    result = factory(obj, prop);\n    obj[prop] = result;\n  }\n  return result;\n}\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = map();\n  for (const k in obj) {\n    if (!hasOwn(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (const part of parts) {\n    if (\n      part &&\n      value &&\n      value[part] !== undefined &&\n      typeof value == 'object' &&\n      hasOwn(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n", "// Export all type-checking helpers for convenience\nexport {isArray} from './array';\nexport {isEnumValue} from './enum';\nexport {isString} from './string';\nexport {isObject} from './object';\n\n/**\n * Determines if value is an ELement\n * @param {*} value\n * @return {boolean}\n */\nexport function isElement(value) {\n  return value?.nodeType == /* Node.ELEMENT_NODE */ 1;\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n", "/** @fileoverview Helpers to wrap functions. */\n\n/**\n * Creates a function that is evaluated only once and returns the cached result\n * subsequently.\n *\n * Please note that `once` only takes the function definition into account,\n * so it will return the same cached value even when the arguments are\n * different.\n *\n * @param {function(...):T} fn\n * @return {function(...):T}\n * @template T\n */\nexport function once(fn) {\n  let evaluated = false;\n  let retValue = null;\n  let callback = fn;\n  return (...args) => {\n    if (!evaluated) {\n      retValue = callback.apply(self, args);\n      evaluated = true;\n      callback = null; // GC\n    }\n    return retValue;\n  };\n}\n\n/**\n * Wraps a given callback and applies a rate limit.\n * It throttles the calls so that no consequent calls have time interval\n * smaller than the given minimal interval.\n *\n * @param {!Window} win\n * @param {function(...T):R} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...T)}\n * @template T\n * @template R\n */\nexport function throttle(win, callback, minInterval) {\n  let locker = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {!Object} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    // Lock the fire for minInterval milliseconds\n    locker = win.setTimeout(waiter, minInterval);\n\n    callback.apply(null, args);\n  }\n\n  /**\n   * Waiter function\n   */\n  function waiter() {\n    locker = 0;\n    // If during the period there're invocations queued up, fire once.\n    if (nextCallArgs) {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function (...args) {\n    if (locker) {\n      nextCallArgs = args;\n    } else {\n      fire(args);\n    }\n  };\n}\n\n/**\n * Wraps a given callback and applies a wait timer, so that minInterval\n * milliseconds must pass since the last call before the callback is actually\n * invoked.\n *\n * @param {!Window} win\n * @param {function(...T):R} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...T)}\n * @template T\n * @template R\n */\nexport function debounce(win, callback, minInterval) {\n  let locker = 0;\n  let timestamp = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {?Array} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    callback.apply(null, args);\n  }\n\n  /**\n   * Wait function for debounce\n   */\n  function waiter() {\n    locker = 0;\n    const remaining = minInterval - (win.Date.now() - timestamp);\n    if (remaining > 0) {\n      locker = win.setTimeout(waiter, remaining);\n    } else {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function (...args) {\n    timestamp = win.Date.now();\n    nextCallArgs = args;\n    if (!locker) {\n      locker = win.setTimeout(waiter, minInterval);\n    }\n  };\n}\n", "import {isArray} from '#core/types/array';\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {string|number|boolean|null}\n */\nlet JSONScalarDef;\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {!Object<string, ?*>} (* should be JSONValueDef)\n */\nlet JSONObjectDef;\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {!Array<?*>} (* should be JSONValueDef)\n */\nlet JSONArrayDef;\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {!JSONScalarDef|!JSONObjectDef|!JSONArrayDef}\n */\nlet JSONValueDef;\n\n/**\n * @typedef {{\n *   YOU_MUST_USE: string,\n *   jsonLiteral: function(),\n *   TO_MAKE_THIS_TYPE: string,\n * }}\n */\nlet InternalJsonLiteralTypeDef;\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {string} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(json));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {string} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    opt_onFailed?.(e);\n    return null;\n  }\n}\n\n/**\n * Deeply checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function deepEquals(a, b, depth = 5) {\n  if (!isFinite(depth) || depth < 0) {\n    throw new Error('Invalid depth: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  /** @type {!Array<{a: JSONValueDef, b: JSONValueDef, depth: number}>} */\n  const queue = [{a, b, depth}];\n  while (queue.length > 0) {\n    const {a, b, depth} = queue.shift();\n    // Only check deep equality if depth > 0.\n    if (depth > 0) {\n      if (typeof a !== typeof b) {\n        return false;\n      } else if (isArray(a) && isArray(b)) {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          queue.push({a: a[i], b: b[i], depth: depth - 1});\n        }\n        continue;\n      } else if (a && b && typeof a === 'object' && typeof b === 'object') {\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        if (keysA.length !== keysB.length) {\n          return false;\n        }\n        for (const k of keysA) {\n          queue.push({a: a[k], b: b[k], depth: depth - 1});\n        }\n        continue;\n      }\n    }\n    // If we get here, then depth == 0 or (a, b) are primitives.\n    if (a !== b) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * This helper function handles configurations specified in a JSON format.\n *\n * It allows the configuration is to be written in plain JS (which has better\n * dev ergonomics like comments and trailing commas), and allows the\n * configuration to be transformed into an efficient JSON-parsed representation\n * in the dist build. See https://v8.dev/blog/cost-of-javascript-2019#json\n *\n * @param {!Object} obj\n * @return {!JsonObject}\n */\nexport function jsonConfiguration(obj) {\n  return /** @type {!JsonObject} */ (obj);\n}\n\n/**\n * This converts an Object into a suitable type to be used in `includeJsonLiteral`.\n * This doesn't actually do any conversion, it only changes the closure type.\n *\n * @param {?JSONValueDef} value\n * @return {!InternalJsonLiteralTypeDef}\n */\nexport function jsonLiteral(value) {\n  return /** @type {!InternalJsonLiteralTypeDef} */ (value);\n}\n\n/**\n * Allows inclusion of a variable (that's wrapped in a jsonLiteral\n * call) to be included inside a jsonConfiguration.\n *\n * @param {!InternalJsonLiteralTypeDef} value\n * @return {*}\n */\nexport function includeJsonLiteral(value) {\n  return value;\n}\n", "/**\n * Whether addEventListener supports options or only takes capture as a boolean\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet optsSupported;\n\n/**\n * Whether addEventListener supports options or only takes passive as a boolean\n * @type {boolean|undefined}\n */\nlet passiveSupported;\n\n/**\n * Options supported by addEventListener\n * @typedef AddEventListenerOptsDef\n * @property {undefined|boolean} [capture]\n * @property {undefined|boolean} [once]\n * @property {undefined|boolean} [passive]\n * @property {undefined|!AbortSignal} [signal]\n * }}\n */\nlet AddEventListenerOptsDef;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or\n * `#core/3p-frame-messaging`, depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {!AddEventListenerOptsDef=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(\n  element,\n  eventType,\n  listener,\n  opt_evtListenerOpts\n) {\n  let localElement = element;\n  let localListener = listener;\n  /** @type {?function(!Event)} */\n  let wrapped = (event) => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // __AMP_REPORT_ERROR is installed globally per window in the entry point.\n      self.__AMP_REPORT_ERROR?.(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  const capture = !!opt_evtListenerOpts?.capture;\n\n  localElement.addEventListener(\n    eventType,\n    wrapped,\n    optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    localElement?.removeEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n    );\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n * Resets the test for whether addEventListener supports options or not.\n */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n\n/**\n * Return boolean. if listener option is supported, return `true`.\n * if not supported, return `false`\n * @param {!Window} win\n * @return {boolean}\n */\nexport function supportsPassiveEventListener(win) {\n  if (passiveSupported !== undefined) {\n    return passiveSupported;\n  }\n\n  passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        // This function will be called when the browser\n        // attempts to access the passive property.\n        passiveSupported = true;\n        return false;\n      },\n    };\n\n    win.addEventListener('test-options', null, options);\n    win.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return passiveSupported;\n}\n\n/**\n * Resets the test for whether addEventListener supports passive options or not.\n */\nexport function resetPassiveSupportedForTesting() {\n  passiveSupported = undefined;\n}\n", "/**\n * Returns true when the build is meant for distribution.\n * This means `amp dist` was called _without_ the --fortesting flag.\n *\n * This is a magic constant replaced by babel.\n *\n * Calls are DCE'd when compiled.\n * @return {boolean}\n */\nexport function isProd() {\n  return IS_PROD;\n}\n", "import {isProd} from './prod';\n\n/**\n * Returns true if executing in a testing environment. Calls may be DCE'd when\n * compiled based on isForDistribution.\n * @param {!Window=} opt_win\n * @return {boolean}\n */\nexport function isTest(opt_win) {\n  if (isProd()) {\n    return false;\n  }\n  const win = opt_win || self;\n  return !!(win.AMP_CONFIG?.test || win.__AMP_TEST || win['__karma__']);\n}\n", "import {isProd} from './prod';\nimport {isTest} from './test';\n\n/**\n * Returns true if executing in a local development or testing environment.\n * Calls may be DCE'd when compiled based on isForDistribution and isTest.\n *\n * @param {!Window=} opt_win\n * @return {boolean}\n */\nexport function isLocalDev(opt_win) {\n  if (isProd()) {\n    return false;\n  }\n\n  return !!self.AMP_CONFIG?.localDev || isTest(opt_win);\n}\n", "/**\n * Returns the internal AMP runtime version. Note that this is not the RTV,\n * which is a prefix and the runtime version.\n *\n * The call sites for this function are replaced with a compile time constant\n * string.\n *\n * @return {string}\n */\nexport function version() {\n  return INTERNAL_RUNTIME_VERSION;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isProd} from './prod';\n\n/**\n * Returns true when compiling an esm binary.\n * This is a magic constant that is replaced by babel.\n *\n * @return {boolean}\n */\nexport function isEsm() {\n  if (isProd()) {\n    return IS_ESM;\n  }\n\n  return self?.__AMP_MODE?.esm ?? IS_ESM;\n}\n", "/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n", "import {map} from '#core/types/object';\n\nconst QUERY_STRING_REGEX = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  const params = map();\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = QUERY_STRING_REGEX.exec(queryString))) {\n    const name = tryDecodeUriComponent(match[1], match[1]);\n    const value = match[2]\n      ? tryDecodeUriComponent(match[2].replace(/\\+/g, ' '), match[2])\n      : '';\n    params[name] = value;\n  }\n  return params;\n}\n\n/**\n * Parses the query # params.\n * @param {!Window=} opt_win\n * @return {!JsonObject}\n */\nexport function getHashParams(opt_win) {\n  const {location} = opt_win || self;\n  // location.originalHash is set by the viewer when it removes the fragment\n  // from the URL.\n  return parseQueryString(location['originalHash'] || location.hash);\n}\n", "/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex =\n  (typeof env['thirdPartyFrameRegex'] == 'string'\n    ? new RegExp(env['thirdPartyFrameRegex'])\n    : env['thirdPartyFrameRegex']) || /^d-\\d+\\.ampproject\\.net$/;\n\nconst cdnProxyRegex =\n  (typeof env['cdnProxyRegex'] == 'string'\n    ? new RegExp(env['cdnProxyRegex'])\n    : env['cdnProxyRegex']) ||\n  /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/;\n\n/**\n * Check for a custom URL definition in special <meta> tags. Note that this does\n * not allow for distinct custom URLs in AmpDocShadow instances. The shell is\n * allowed to define one set of custom URLs via AMP_CONFIG (recommended) or by\n * including <meta> tags in the shell <head>. Those custom URLs then apply to\n * all AMP documents loaded in the shell.\n * @param {string} name\n * @return {?string}\n * @private\n */\nfunction getMetaUrl(name) {\n  // Avoid exceptions in unit tests\n  if (!self.document || !self.document.head) {\n    return null;\n  }\n\n  // Disallow on proxy origins\n  if (self.location && cdnProxyRegex.test(self.location.origin)) {\n    return null;\n  }\n\n  const metaEl = self.document.head./*OK*/ querySelector(\n    `meta[name=\"${name}\"]`\n  );\n  return (metaEl && metaEl.getAttribute('content')) || null;\n}\n\n/**\n * @typedef {{\n *   thirdParty: string,\n *   thirdPartyFrameHost: string,\n *   thirdPartyFrameRegex: !RegExp,\n *   cdn: string,\n *   cdnProxyRegex: !RegExp,\n *   localhostRegex: !RegExp,\n *   errorReporting: string,\n *   betaErrorReporting: string,\n *   localDev: boolean,\n *   trustedViewerHosts: !Array<!RegExp>,\n *   geoApi: ?string,\n * }}\n */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex,\n  cdn:\n    env['cdnUrl'] || getMetaUrl('runtime-host') || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting:\n    env['errorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r',\n  betaErrorReporting:\n    env['betaErrorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r-beta',\n  localDev: env['localDev'] || false,\n  /**\n   * These domains are trusted with more sensitive viewer operations such as\n   * propagating the referrer. If you believe your domain should be here,\n   * file the issue on GitHub to discuss. The process will be similar\n   * (but somewhat more stringent) to the one described in the [3p/README.md](\n   * https://github.com/ampproject/amphtml/blob/main/3p/README.md)\n   *\n   * {!Array<!RegExp>}\n   */\n  trustedViewerHosts: [\n    /(^|\\.)google\\.(com?|[a-z]{2}|com?\\.[a-z]{2}|cat)$/,\n    /(^|\\.)gmail\\.(com|dev)$/,\n  ],\n  // Optional fallback API if amp-geo is left unpatched\n  geoApi: env['geoApiUrl'] || getMetaUrl('amp-geo-api'),\n};\n\nexport const config = {\n  urls,\n};\n", "import * as coreMode from '#core/mode';\nimport {getHashParams} from '#core/types/string/url';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   esm: boolean,\n *   test: boolean,\n *   rtvVersion: string,\n *   runtime: (null|string|undefined),\n *   a4aId: (null|string|undefined)\n * }}\n */\nexport let ModeDef;\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.__AMP_MODE) {\n    return win.__AMP_MODE;\n  }\n  return (win.__AMP_MODE = getMode_(win));\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  const hashParams = getHashParams(win);\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `amp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: coreMode.isLocalDev(win),\n    development: isModeDevelopment(win, hashParams),\n    esm: coreMode.isEsm(),\n    test: coreMode.isTest(win),\n    rtvVersion: getRtvVersion(win),\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @return {string}\n */\nfunction getRtvVersion(win) {\n  // Ignore memoized copy during testing to allow override.\n  if (!rtvVersion || coreMode.isTest(win)) {\n    // Currently `internalRuntimeVersion` and thus `mode.version` contain only\n    // major version. The full version however must also carry the minor version.\n    // We will default to production default `01` minor version for now.\n    // TODO(erwinmombay): decide whether internalRuntimeVersion should contain\n    // minor version.\n    rtvVersion = win.AMP_CONFIG?.v || `01${coreMode.version()}`;\n  }\n  return rtvVersion;\n}\n\n/**\n * Triggers validation or enable pub level logging. Validation can be\n * bypassed via #validate=0.\n * Note that AMP_DEV_MODE flag is used for testing purposes.\n * @param {!Window} win\n * @param {!JsonObject=} opt_hashParams\n * @return {boolean}\n */\nexport function isModeDevelopment(win, opt_hashParams) {\n  const devModes = ['1', 'actions', 'amp', 'amp4ads', 'amp4email'];\n  const devParam = opt_hashParams || getHashParams(win);\n  return devModes.includes(devParam['development']) || !!win.AMP_DEV_MODE;\n}\n\n/**\n * @param {!Window} win\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win) {\n  return getRtvVersion(win);\n}\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n", "import * as assertions from '#core/assert/base';\nimport {\n  createError,\n  createExpectedError,\n  duplicateErrorIfNecessary,\n} from '#core/error';\nimport {\n  USER_ERROR_EMBED_SENTINEL,\n  USER_ERROR_SENTINEL,\n  elementStringOrPassThru,\n  isUserErrorMessage,\n  stripUserError,\n} from '#core/error/message-helpers';\nimport * as mode from '#core/mode';\nimport {isArray, isString} from '#core/types';\nimport {once} from '#core/types/function';\nimport {getHashParams} from '#core/types/string/url';\n\nimport {urls} from '../config';\nimport {getMode} from '../mode';\n\nconst noop = () => {};\n\n// These are exported here despite being defined elswhere to avoid updating\n// imports across many files for now.\nexport {USER_ERROR_SENTINEL, isUserErrorMessage};\n\n/**\n * Sets reportError function. Called from error-reporting.js to break cyclic\n * dependency.\n * @param {function(this:Window, Error, (?Element)=): ?|undefined} fn\n */\nexport function setReportError(fn) {\n  self.__AMP_REPORT_ERROR = fn;\n}\n\n/**\n * @enum {number}\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Prefixes `internalRuntimeVersion` with the `01` channel signifier (for prod.) for\n * extracted message URLs.\n * (Specific channel is irrelevant: message tables are invariant on internal version.)\n * @return {string}\n */\nconst messageUrlRtv = () => `01${mode.version()}`;\n\n/**\n * Gets a URL to display a message on amp.dev.\n * @param {string} id\n * @param {!Array} interpolatedParts\n * @return {string}\n */\nconst externalMessageUrl = (id, interpolatedParts) =>\n  interpolatedParts.reduce(\n    (prefix, arg) => `${prefix}&s[]=${messageArgToEncodedComponent(arg)}`,\n    `https://log.amp.dev/?v=${messageUrlRtv()}&id=${encodeURIComponent(id)}`\n  );\n\n/**\n * URL to simple log messages table JSON file, which contains an Object<string, string>\n * which maps message id to full message template.\n * @return {string}\n */\nconst externalMessagesSimpleTableUrl = () =>\n  `${urls.cdn}/rtv/${messageUrlRtv()}/log-messages.simple.json`;\n\n/**\n * @param {*} arg\n * @return {string}\n */\nconst messageArgToEncodedComponent = (arg) =>\n  encodeURIComponent(String(elementStringOrPassThru(arg)));\n\n/**\n * @param {!Window=} opt_win\n * @return {number}\n */\nexport const logHashParam = (opt_win) =>\n  parseInt(getHashParams(opt_win)['log'], 10);\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don\u2019t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(number, boolean):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix = '') {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = getMode().test && win.__AMP_TEST_IFRAME ? win.parent : win;\n\n    /** @private @const {function(number, boolean):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix;\n\n    /** @private {?JsonObject} */\n    this.messages_ = null;\n\n    this.fetchExternalMessagesOnce_ = once(() => {\n      win\n        .fetch(externalMessagesSimpleTableUrl())\n        .then((response) => response.json(), noop)\n        .then((opt_messages) => {\n          if (opt_messages) {\n            this.messages_ = /** @type {!JsonObject} */ (opt_messages);\n          }\n        });\n    });\n\n    // This bound assertion function is capable of handling the format used when\n    // error/assertion messages are extracted. This logic hasn't yet been\n    // migrated to an AMP-independent form for use in core. This binding allows\n    // Log assertion helpers to maintain message-extraction capabilities until\n    // that logic can be moved to core.\n    this.boundAssertFn_ = /** @type {!assertions.AssertionFunctionDef} */ (\n      this.assert.bind(this)\n    );\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    const {win} = this;\n    // No console - can't enable logging.\n    if (\n      !win.console?.log ||\n      // Logging has been explicitly disabled.\n      logHashParam(win) == 0\n    ) {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev) {\n      return LogLevel.INFO;\n    }\n\n    return this.defaultLevelWithFunc_();\n  }\n\n  /**\n   * @param {!Window=} opt_win provided for testing\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevelWithFunc_(opt_win) {\n    // Delegate to the specific resolver.\n    return this.levelFunc_(logHashParam(opt_win), getMode().development);\n  }\n\n  /**\n   * @param {string} tag\n   * @param {!LogLevel} level\n   * @param {!Array} messages\n   * @return {boolean} true if a the message was logged\n   */\n  msg_(tag, level, messages) {\n    if (level > (levelOverride_ ?? this.level_)) {\n      return false;\n    }\n\n    const cs = this.win.console;\n    const fn =\n      {\n        [LogLevel.ERROR]: cs.error,\n        [LogLevel.INFO]: cs.info,\n        [LogLevel.WARN]: cs.warn,\n      }[level] ?? cs.log;\n\n    const args = this.maybeExpandMessageArgs_(messages);\n    // Prefix console message with \"[tag]\".\n    const prefix = `[${tag}]`;\n    if (isString(args[0])) {\n      // Prepend string to avoid breaking string substitutions e.g. %s.\n      args[0] = prefix + ' ' + args[0];\n    } else {\n      args.unshift(prefix);\n    }\n    fn.apply(cs, args);\n\n    return true;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  fine(tag, ...args) {\n    this.msg_(tag, LogLevel.FINE, args);\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  info(tag, ...args) {\n    this.msg_(tag, LogLevel.INFO, args);\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  warn(tag, ...args) {\n    this.msg_(tag, LogLevel.WARN, args);\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  error(tag, ...args) {\n    if (!this.msg_(tag, LogLevel.ERROR, args)) {\n      const error = this.createError.apply(this, args);\n      error.name = tag || error.name;\n      self.__AMP_REPORT_ERROR?.(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  expectedError(tag, ...args) {\n    if (!this.msg_(tag, LogLevel.ERROR, args)) {\n      self.__AMP_REPORT_ERROR?.(this.createExpectedError.apply(this, args));\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    return this.setErrorSuffix_(createError.apply(null, arguments));\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    return this.setErrorSuffix_(createExpectedError.apply(null, arguments));\n  }\n\n  /**\n   * @param {!Error} error\n   * @return {!Error}\n   * @private\n   */\n  setErrorSuffix_(error) {\n    error = duplicateErrorIfNecessary(error);\n\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = stripUserError(error.message);\n    }\n\n    return error;\n  }\n\n  /**\n   * @param {!Array} args\n   * @return {!Array}\n   * @private\n   */\n  maybeExpandMessageArgs_(args) {\n    return isArray(args[0])\n      ? this.expandMessageArgs_(/** @type {!Array} */ (args[0]))\n      : args;\n  }\n\n  /**\n   * Either redirects a pair of (errorId, ...args) to a URL where the full\n   * message is displayed, or displays it from a fetched table.\n   *\n   * This method is used by the output of the `transform-log-methods` babel\n   * plugin. It should not be used directly. Use the (*error|assert*|info|warn)\n   * methods instead.\n   *\n   * @param {!Array} parts\n   * @return {!Array}\n   * @private\n   */\n  expandMessageArgs_(parts) {\n    // First value should exist.\n    const id = parts.shift();\n    // Best effort fetch of message template table.\n    // Since this is async, the first few logs might be indirected to a URL even\n    // if in development mode. Message table is ~small so this should be a short\n    // gap.\n    if (getMode(this.win).development) {\n      this.fetchExternalMessagesOnce_();\n    }\n\n    return this.messages_?.[id]\n      ? [this.messages_[id]].concat(parts)\n      : [`More info at ${externalMessageUrl(id, parts)}`];\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {!Array|string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @throws {!Error} When `value` is falsey.\n   * @template T\n   * @closurePrimitive {asserts.truthy}\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    if (isArray(opt_message)) {\n      return this.assert.apply(\n        this,\n        [shouldBeTrueish].concat(\n          this.expandMessageArgs_(/** @type {!Array} */ (opt_message))\n        )\n      );\n    }\n\n    return assertions.assert.apply(\n      null,\n      [this.suffix_].concat(Array.prototype.slice.call(arguments))\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertElement(shouldBeElement, opt_message) {\n    return assertions.assertElement(\n      this.boundAssertFn_,\n      shouldBeElement,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertString(shouldBeString, opt_message) {\n    return assertions.assertString(\n      this.boundAssertFn_,\n      shouldBeString,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    return assertions.assertNumber(\n      this.boundAssertFn_,\n      shouldBeNumber,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument is not an array.\n   * The array can be empty.\n   *\n   * @param {*} shouldBeArray\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Array} The array value\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertArray(shouldBeArray, opt_message) {\n    return assertions.assertArray(\n      this.boundAssertFn_,\n      shouldBeArray,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    return assertions.assertBoolean(\n      this.boundAssertFn_,\n      shouldBeBoolean,\n      opt_message\n    );\n  }\n}\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.__AMP_LOG = self.__AMP_LOG || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n};\n\nconst logs = self.__AMP_LOG;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?typeof Log}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log constructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log constructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Calls the log constructor with a given level function and suffix.\n * @param {function(number, boolean):!LogLevel} levelFunc\n * @param {string=} opt_suffix\n * @return {!Log}\n */\nfunction callLogConstructor(levelFunc, opt_suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, levelFunc, opt_suffix);\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  // logs.user must exist first to perform the logs.user.win check below\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n\n  if (isFromEmbed(logs.user.win, opt_element)) {\n    return (\n      logs.userForEmbed ||\n      (logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL))\n    );\n  }\n  return logs.user;\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  return callLogConstructor(\n    (logNum, development) =>\n      development || logNum >= 1 ? LogLevel.FINE : LogLevel.WARN,\n    suffix\n  );\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  return (\n    logs.dev ||\n    (logs.dev = callLogConstructor((logNum) =>\n      logNum >= 3 ? LogLevel.FINE : logNum >= 2 ? LogLevel.INFO : LogLevel.OFF\n    ))\n  );\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nfunction isFromEmbed(win, opt_element) {\n  return opt_element && opt_element.ownerDocument.defaultView != win;\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function devAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  if (mode.isMinified()) {\n    return shouldBeTrueish;\n  }\n  if (self.__AMP_ASSERTION_CHECK) {\n    // This will never execute regardless, but will be included on unminified\n    // builds. It will be DCE'd away from minified builds, and so can be used to\n    // validate that Babel is properly removing dev assertions in minified\n    // builds.\n    console /*OK*/\n      .log('__devAssert_sentinel__');\n  }\n\n  return dev()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function userAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  return user()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n", "import {internalListenImplementation} from '#core/dom/event-helper-listen';\nimport {lastChildElement} from '#core/dom/query';\nimport * as mode from '#core/mode';\n\nimport {user} from '#utils/log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/** @const {string} */\nexport const MEDIA_LOAD_FAILURE_SRC_PROPERTY = '__AMP_MEDIA_LOAD_FAILURE_SRC';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (mode.isEsm() || typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n      type,\n      !!eventInit.bubbles,\n      !!eventInit.cancelable,\n      detail\n    );\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n    element,\n    eventType,\n    listener,\n    opt_evtListenerOpts\n  );\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(\n    element,\n    eventType,\n    (event) => {\n      try {\n        localListener(event);\n      } finally {\n        // Ensure listener is GC'd\n        localListener = null;\n        unlisten();\n      }\n    },\n    opt_evtListenerOpts\n  );\n  return unlisten;\n}\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(\n  element,\n  eventType,\n  opt_evtListenerOpts,\n  opt_cancel\n) {\n  let unlisten;\n  const eventPromise = new Promise((resolve) => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(\n    eleOrWindow.complete ||\n    eleOrWindow.readyState == 'complete' ||\n    (isHTMLMediaElement(eleOrWindow) && eleOrWindow.readyState > 0) ||\n    // If the passed in thing is a Window, infer loaded state from\n    //\n    (eleOrWindow.document && eleOrWindow.document.readyState == 'complete')\n  );\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const isMediaElement = isHTMLMediaElement(eleOrWindow);\n  if (\n    isMediaElement &&\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] === eleOrWindow.currentSrc\n  ) {\n    return Promise.reject(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    if (isMediaElement) {\n      // The following event can be triggered by the media or one of its\n      // sources. Using capture is required as the media events do not bubble.\n      unlistenLoad = listenOnce(eleOrWindow, 'loadedmetadata', resolve, {\n        capture: true,\n      });\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // Don't unlisten on error for Windows.\n    if (!eleOrWindow.tagName) {\n      return;\n    }\n    let errorTarget = eleOrWindow;\n    // If the media element has no `src`, it will try to load the sources in\n    // document order. If the last source errors, then the media element\n    // loading errored.\n    if (isMediaElement && !eleOrWindow.hasAttribute('src')) {\n      errorTarget = lastChildElement(\n        eleOrWindow,\n        (child) => child.tagName === 'SOURCE'\n      );\n      if (!errorTarget) {\n        return reject(new Error('Media has no source.'));\n      }\n    }\n    unlistenError = listenOnce(errorTarget, 'error', reject);\n  });\n\n  return loadingPromise.then(\n    () => {\n      if (unlistenError) {\n        unlistenError();\n      }\n      return eleOrWindow;\n    },\n    () => {\n      if (unlistenLoad) {\n        unlistenLoad();\n      }\n      failedToLoad(eleOrWindow);\n    }\n  );\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Mark the element as errored since some elements - like HTMLMediaElement\n  // using HTMLSourceElement - do not provide any synchronous way to verify if\n  // they already errored, even though the error event was already dispatched.\n  if (isHTMLMediaElement(eleOrWindow)) {\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] =\n      eleOrWindow.currentSrc || true;\n  }\n\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if the parameter is a HTMLMediaElement.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nfunction isHTMLMediaElement(eleOrWindow) {\n  return eleOrWindow.tagName === 'AUDIO' || eleOrWindow.tagName === 'VIDEO';\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n", "/* eslint-disable local/window-property-name */\n\nimport {tryResolve} from '#core/data-structures/promise';\nimport {isFiniteNumber} from '#core/types';\nimport {once} from '#core/types/function';\nimport {dict} from '#core/types/object';\nimport {tryParseJson} from '#core/types/object/json';\n\nimport {getData, listen} from '#utils/event-helper';\n\nimport {getMode} from './mode';\n\n/** @fileoverview Entry point for documents inside an <amp-video-iframe>. */\n\nconst TAG = '<amp-video-iframe>';\nconst DOCS_URL = 'https://go.amp.dev/c/amp-video-iframe';\nconst __AMP__ = '__AMP__VIDEO_IFRAME__';\n\n/**\n * @typedef {{\n *   on: function(string, function()),\n *   play: function(),\n *   pause: function(),\n *   setMuted: function(boolean),\n *   setControls: function(boolean),\n *   setFullscreen: function(boolean),\n * }}\n */\nlet JwplayerPartialInterfaceDef;\n\n/**\n * @param {T} shouldBeTrueish\n * @param {...*} args\n * @return {T}\n * @template T\n */\nfunction userAssert(shouldBeTrueish, ...args) {\n  if (!shouldBeTrueish) {\n    throw new Error(`[${TAG}] ${args.join(' ')} ${DOCS_URL}`);\n  }\n  return shouldBeTrueish;\n}\n\nconst validMethods = [\n  'pause',\n  'play',\n  'mute',\n  'unmute',\n  'fullscreenenter',\n  'fullscreenexit',\n  'showcontrols',\n  'hidecontrols',\n];\n\n/**\n * @param {function()} win\n * @param {*} opt_initializer\n * @return {function()}\n * @visibleForTesting\n */\nexport function getVideoJs(win, opt_initializer) {\n  return userAssert(\n    opt_initializer || /** @type {function()} */ (win.videojs),\n    'Video.JS not imported or initializer undefined.'\n  );\n}\n\n/** @visibleForTesting */\nexport class AmpVideoIntegration {\n  /** @param {!Window} win */\n  constructor(win) {\n    /**\n     * Used for checking callback return type.\n     * @visibleForTesting\n     */\n    this.isAmpVideoIntegration_ = true;\n\n    /** @private @const */\n    this.callCounter_ = 0;\n\n    /** @private @const {!Object<number, function()>} */\n    this.callbacks_ = {};\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, function()>} */\n    this.methods_ = {};\n\n    /** @private @const {function()} */\n    this.listenToOnce_ = once(() => {\n      listenTo(this.win_, (e) => this.onMessage_(e));\n    });\n\n    /** @private {boolean} */\n    this.muted_ = false;\n\n    /** @private {boolean} */\n    this.usedListenToHelper_ = false;\n\n    /**\n     * @return {!JsonObject}\n     * @private\n     */\n    this.getMetadataOnce_ = once(() => tryParseJson(this.win_.name));\n  }\n\n  /** @return {!JsonObject} */\n  getMetadata() {\n    return this.getMetadataOnce_();\n  }\n\n  /**\n   * @param {string} name\n   * @param {function()} callback\n   */\n  method(name, callback) {\n    userAssert(validMethods.indexOf(name) > -1, `Invalid method ${name}.`);\n\n    const wrappedCallback =\n      name == 'play' || name == 'pause'\n        ? this.safePlayOrPause_(callback)\n        : callback;\n\n    this.methods_[name] = wrappedCallback;\n    this.listenToOnce_();\n  }\n\n  /**\n   * @param {!JsonObject} data\n   * @private\n   */\n  onMessage_(data) {\n    const id = data['id'];\n    if (isFiniteNumber(id) && this.callbacks_[id]) {\n      this.handleResponse_(id, data['args']);\n      return;\n    }\n\n    if (data['event'] == 'method') {\n      this.maybeExecute_(data['method']);\n    }\n  }\n\n  /**\n   * @param {number} id\n   * @param {!JsonObject} args\n   * @private\n   */\n  handleResponse_(id, args) {\n    const callback = this.callbacks_[id];\n    callback(args);\n    delete this.callbacks_[id];\n  }\n\n  /**\n   * @param {string} method\n   * @private\n   */\n  maybeExecute_(method) {\n    if (!(method in this.methods_)) {\n      return;\n    }\n    this.methods_[method]();\n  }\n\n  /**\n   * @param {string} type\n   * @param {*=} opt_obj\n   * @param {function()=} opt_initializer For VideoJS, this optionally takes a\n   * reference to the `videojs` function. If not provided, this reference\n   * will be taken from the `window` object.\n   */\n  listenTo(type, opt_obj, opt_initializer) {\n    userAssert(\n      !this.usedListenToHelper_,\n      '`listenTo` is meant to be used once per page.'\n    );\n    const types = {\n      'jwplayer': () => {\n        userAssert(\n          !opt_initializer,\n          \"listenTo('jwplayer', opt_instance) does not take an initializer.\"\n        );\n        this.listenToJwPlayer_(this.getJwplayer_(opt_obj));\n      },\n      'videojs': () => {\n        this.listenToVideoJs_(\n          userAssert(\n            opt_obj,\n            \"listenTo('videojs', element) expects a second argument\"\n          ),\n          opt_initializer\n        );\n      },\n    };\n    userAssert(\n      types[type.toLowerCase()],\n      `Invalid listener type [${type}].`,\n      `Valid types are [${Object.keys(types).join(', ')}]`\n    )(); // notice the call here ;)\n    this.usedListenToHelper_ = true;\n  }\n\n  /**\n   * Checks comformity for opt_player, or obtains global singleton instance.\n   * @param {?JwplayerPartialInterfaceDef=} opt_player\n   * @return {!JwplayerPartialInterfaceDef}\n   */\n  getJwplayer_(opt_player) {\n    if (opt_player) {\n      userAssert(\n        opt_player.on,\n        \"listenTo('jwplayer', myjwplayer) takes a jwplayer instance as \",\n        'second argument'\n      );\n      return opt_player;\n    }\n    return userAssert(\n      this.win_.jwplayer,\n      \"listenTo('jwplayer') expects a global jwplayer() in window.\"\n    )(); // notice the call here ;)\n  }\n\n  /**\n   * @param {!JwplayerPartialInterfaceDef} player\n   * @private\n   */\n  listenToJwPlayer_(player) {\n    ['error', 'setupError'].forEach((e) => {\n      player.on(e, () => {\n        userAssert.apply(null, [false].concat(arguments));\n        this.postEvent('error');\n      });\n    });\n\n    ['adSkipped', 'adComplete', 'adError'].forEach((e) => {\n      player.on(e, () => this.postEvent('ad_end'));\n    });\n\n    player.on('adStarted', () => this.postEvent('ad_start'));\n\n    const redispatchAs = {\n      'play': 'playing',\n      'ready': 'canplay',\n      'pause': 'pause',\n    };\n\n    Object.keys(redispatchAs).forEach((e) => {\n      player.on(e, () => this.postEvent(redispatchAs[e]));\n    });\n\n    player.on('volume', (e) => this.onVolumeChange_(e.volume));\n\n    this.method('play', () => player.play());\n    this.method('pause', () => player.pause());\n    this.method('mute', () => player.setMute(true));\n    this.method('unmute', () => player.setMute(false));\n    this.method('showcontrols', () => player.setControls(true));\n    this.method('hidecontrols', () => player.setControls(false));\n    this.method('fullscreenenter', () => player.setFullscreen(true));\n    this.method('fullscreenexit', () => player.setFullscreen(false));\n  }\n\n  /**\n   * @param {!Element} element\n   * @param {function()=} opt_initializer\n   * @private\n   */\n  listenToVideoJs_(element, opt_initializer) {\n    const initializer = getVideoJs(this.win_, opt_initializer);\n    const player = initializer(element);\n\n    player.ready(() => {\n      const canplay = 'canplay';\n\n      ['playing', 'pause', 'ended'].forEach((e) => {\n        player.on(e, () => this.postEvent(e));\n      });\n\n      // in case `canplay` fires before this script loads\n      if (player.readyState() >= /* HAVE_FUTURE_DATA */ 3) {\n        this.postEvent(canplay);\n      } else {\n        player.on(canplay, () => this.postEvent(canplay));\n      }\n\n      listen(element, 'volumechange', () =>\n        this.onVolumeChange_(player.volume())\n      );\n\n      this.method('play', () => player.play());\n      this.method('pause', () => player.pause());\n      this.method('mute', () => player.muted(true));\n      this.method('unmute', () => player.muted(false));\n      this.method('showcontrols', () => player.controls(true));\n      this.method('hidecontrols', () => player.controls(false));\n      this.method('fullscreenenter', () => player.requestFullscreen());\n      this.method('fullscreenexit', () => player.exitFullscreen());\n    });\n  }\n\n  /**\n   * @param {number} newVolume\n   * @private\n   */\n  onVolumeChange_(newVolume) {\n    if (newVolume < 0.01) {\n      this.muted_ = true;\n      this.postEvent('muted');\n      return;\n    }\n    if (this.muted_) {\n      this.muted_ = false;\n      this.postEvent('unmuted');\n    }\n  }\n\n  /**\n   * @param {function()} callback\n   * @return {!Promise}\n   * @private\n   */\n  safePlayOrPause_(callback) {\n    return () => {\n      try {\n        tryResolve(() => callback());\n      } catch (e) {\n        // OK to dismiss errors as they are expected.\n      }\n    };\n  }\n\n  /**\n   * Posts a playback event.\n   * @param {string} event\n   */\n  postEvent(event) {\n    this.postToParent_(dict({'event': event}));\n  }\n\n  /**\n   * Posts a custom analytics event.\n   * @param {string} eventType\n   * @param {!Object<string, string>=} opt_vars\n   */\n  postAnalyticsEvent(eventType, opt_vars) {\n    this.postToParent_(\n      dict({\n        'event': 'analytics',\n        'analytics': {\n          'eventType': eventType,\n          'vars': opt_vars,\n        },\n      })\n    );\n  }\n\n  /**\n   * @param {!JsonObject} data\n   * @param {function()=} opt_callback\n   * @return {number}\n   * @private\n   */\n  postToParent_(data, opt_callback) {\n    const id = this.callCounter_++;\n    const completeData = {id, ...data};\n\n    if (!getMode(this.win_).test && this.win_.parent) {\n      this.win_.parent./*OK*/ postMessage(completeData, '*');\n    }\n\n    if (opt_callback) {\n      this.callbacks_[id] = opt_callback;\n    }\n    return id;\n  }\n\n  /**\n   * Gets the video's intersection with the document's viewport.\n   * @param {function(!JsonObject)} callback\n   */\n  getIntersection(callback) {\n    this.getFromHostForTesting_('getIntersection', callback);\n  }\n\n  /**\n   * Gets the host document's user consent data.\n   * @param {function(!JsonObject)} callback\n   */\n  getConsentData(callback) {\n    this.getFromHostForTesting_('getConsentData', callback);\n  }\n\n  /**\n   * Returns message id for testing. Private as message id is an implementation\n   * detail that others should not rely on.\n   * @param {string} method\n   * @param {function(!JsonObject)} callback\n   * @return {number}\n   * @private\n   */\n  getFromHostForTesting_(method, callback) {\n    this.listenToOnce_();\n    return this.postToParent_(dict({'method': method}), callback);\n  }\n}\n\n/**\n * @param {!Window} win\n * @param {function(!JsonObject)} onMessage\n */\nfunction listenTo(win, onMessage) {\n  listen(win, 'message', (e) => {\n    const message = tryParseJson(getData(e));\n    if (!message) {\n      // only process valid JSON.\n      return;\n    }\n    onMessage(message);\n  });\n}\n\n/**\n * Adopt window asynchronously.\n * This follows the same method as AMP.push (see runtime).\n * @param {!Window} global\n * @visibleForTesting\n */\nexport function adopt(global) {\n  userAssert(\n    !global[__AMP__],\n    'video-iframe-integration-v0.js should only be included once.'\n  );\n\n  global[__AMP__] = true;\n\n  // Hacky way to make AMP errors (e.g. from listenFor) do *something*.\n  global.__AMP_REPORT_ERROR = console.error.bind(console);\n\n  // Initialize one object per frame.\n  const integration = new AmpVideoIntegration(global);\n\n  // Create array if the script loaded before callback push\n  // (otherwise already created).\n  const callbacks = (global.AmpVideoIframe = global.AmpVideoIframe || []);\n\n  // Rewrite push to execute callbacks are added after adoption.\n  callbacks.push = (callback) => callback(integration);\n\n  // Execute callbacks created before adoption.\n  callbacks.forEach(callbacks.push);\n}\n\nif (!getMode(self).test) {\n  adopt(self);\n}\n"],
  "mappings": "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",
  "names": []
}
