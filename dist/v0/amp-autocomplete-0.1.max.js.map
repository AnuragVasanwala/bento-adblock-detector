{
  "version": 3,
  "sources": ["../../third_party/fuzzysearch/index.js", "../../src/core/data-structures/promise.js", "../../src/core/mode/prod.js", "../../src/core/mode/test.js", "../../src/core/mode/minified.js", "../../src/core/mode/esm.js", "../../src/core/types/array.js", "../../src/core/types/enum.js", "../../src/core/types/string/index.js", "../../src/core/types/object/index.js", "../../src/core/types/index.js", "../../src/core/error/message-helpers.js", "../../src/core/assert/base.js", "../../src/core/assert/dev.js", "../../src/core/constants/action-constants.js", "../../src/core/types/object/json.js", "../../src/core/window/index.js", "../../third_party/css-escape/css-escape.js", "../../src/core/dom/index.js", "../../src/core/types/function/index.js", "../../src/core/types/string/url.js", "../../src/config.js", "../../src/utils/log.js", "../../extensions/amp-autocomplete/0.1/autocomplete-binding-inline.js", "../../extensions/amp-autocomplete/0.1/autocomplete-binding-single.js", "../../build/amp-autocomplete-0.1.css.js", "../../src/core/constants/key-codes.js", "../../src/core/dom/layout/index.js", "../../src/service/extension-script.js", "../../src/service-helpers.js", "../../src/element-service.js", "../../src/service/index.js", "../../src/form-data-wrapper.js", "../../src/core/data-structures/lru-cache.js", "../../src/url.js", "../../src/utils/xhr-utils.js", "../../src/ssr-template-helper.js", "../../src/batched-json.js", "../../src/utils/event-helper.js", "../../src/core/math.js", "../../src/core/dom/style.js", "../../extensions/amp-autocomplete/0.1/amp-autocomplete.js"],
  "sourcesContent": ["'use strict';\n\nfunction fuzzysearch(query, text) {\n  var tlen = text.length;\n  var qlen = query.length;\n  if (qlen > tlen) {\n    return false;\n  }\n  if (qlen === tlen && query === text) {\n    return true;\n  }\n  outer: for (var i = 0, j = 0; i < qlen; i++) {\n    var qch = query.charCodeAt(i);\n    while (j < tlen) {\n      if (text.charCodeAt(j++) === qch) {\n        continue outer;\n      }\n    }\n    return false;\n  }\n  return true;\n}\n\nmodule.exports = fuzzysearch;\n", "let resolved;\n\n/**\n * Returns a cached resolved promise.\n * Babel converts direct calls to Promise.resolve() (with no arguments) into\n * calls to this.\n *\n * @return {!Promise<undefined>}\n */\nexport function resolvedPromise() {\n  if (resolved) {\n    return resolved;\n  }\n\n  // It's important that we call with `undefined` here, to prevent a transform\n  // recursion. If we didn't pass an arg, then the transformer would replace\n  // this callsite with a call to `resolvedPromise()`.\n  resolved = Promise.resolve(undefined);\n  return resolved;\n}\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /** Constructor. */\n  constructor() {\n    /** @const {!Promise<T>} */\n    this.promise = new /*OK*/ Promise((res, rej) => {\n      /** @const {function(T=)} */\n      this.resolve = res;\n      /** @const {function(*=)} */\n      this.reject = rej;\n    });\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise((resolve) => {\n    resolve(fn());\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!IThenable>=} opt_promises\n   */\n  constructor(opt_promises) {\n    /** @private @const {!Deferred} */\n    this.deferred_ = new Deferred();\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (const promise of opt_promises) {\n        this.add(promise);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!IThenable} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    promise.then(\n      (result) => {\n        if (this.count_ === countAtAdd) {\n          this.deferred_.resolve(result);\n        }\n      },\n      (error) => {\n        // Don't follow behavior of Promise.all and Promise.race error so that\n        // this will only reject when most recently added promise fails.\n        if (this.count_ === countAtAdd) {\n          this.deferred_.reject(error);\n        }\n      }\n    );\n    return this.deferred_.promise;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.deferred_.promise.then(opt_resolve, opt_reject);\n  }\n}\n", "/**\n * Returns true when the build is meant for distribution.\n * This means `amp dist` was called _without_ the --fortesting flag.\n *\n * This is a magic constant replaced by babel.\n *\n * Calls are DCE'd when compiled.\n * @return {boolean}\n */\nexport function isProd() {\n  return IS_PROD;\n}\n", "import {isProd} from './prod';\n\n/**\n * Returns true if executing in a testing environment. Calls may be DCE'd when\n * compiled based on isForDistribution.\n * @param {!Window=} opt_win\n * @return {boolean}\n */\nexport function isTest(opt_win) {\n  if (isProd()) {\n    return false;\n  }\n  const win = opt_win || self;\n  return !!(win.AMP_CONFIG?.test || win.__AMP_TEST || win['__karma__']);\n}\n", "/**\n * Returns true whenever closure compiler is used.\n * This is a magic constant that is replaced by babel.\n *\n * @return {boolean}\n */\nexport function isMinified() {\n  return IS_MINIFIED;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isProd} from './prod';\n\n/**\n * Returns true when compiling an esm binary.\n * This is a magic constant that is replaced by babel.\n *\n * @return {boolean}\n */\nexport function isEsm() {\n  if (isProd()) {\n    return IS_ESM;\n  }\n\n  return self?.__AMP_MODE?.esm ?? IS_ESM;\n}\n", "/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  return arrayLike ? Array.prototype.slice.call(arrayLike) : [];\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport const {isArray} = Array;\n\n/**\n * If the specified argument is an array, it's returned as is. If it's a\n * single item, the array containing this item is created and returned.\n *\n * The double-template pattern here solves a bug where CC can be passed a value\n * with declared type {string|!Array<string>} and return a value with a type of\n * {!Array<string|Array<string>>}.\n *\n * @param {!Array<T>|S} arrayOrSingleItem\n * @return {!Array<T>|!Array<S>}\n * @template S\n * @template T\n */\nexport function arrayOrSingleItemToArray(arrayOrSingleItem) {\n  return isArray(arrayOrSingleItem)\n    ? /** @type {!Array<T>} */ (arrayOrSingleItem)\n    : [/** @type {!S} */ (arrayOrSingleItem)];\n}\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order. Note that it does NOT handle NaN case as expected.\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Removes elements that shouldRemove returns true for from the array.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} shouldRemove\n * @return {!Array<T>}\n * @template T\n */\nexport function remove(array, shouldRemove) {\n  const removed = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (shouldRemove(item, i, array)) {\n      removed.push(item);\n    } else {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    }\n  }\n  if (index < array.length) {\n    array.length = index;\n  }\n  return removed;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes the first matching item in the array. Returns `true` if the array\n * has changed.\n *\n * @param {!Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function removeItem(array, item) {\n  const index = array.indexOf(item);\n  if (index == -1) {\n    return false;\n  }\n  array.splice(index, 1);\n  return true;\n}\n\n/**\n * Returns the last item in an array.\n *\n * @param {Array<T>} array\n * @template T\n * @return {?T}\n */\nexport function lastItem(array) {\n  return array[array.length - 1];\n}\n", "/**\n * Checks whether `val` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} val\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, val) {\n  for (const k in enumObj) {\n    if (enumObj[k] === val) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.includes.\n * @param {string} string\n * @param {string} substring\n * @param {number=} start\n * @return {boolean}\n */\nexport function includes(string, substring, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n  if (start + substring.length > string.length) {\n    return false;\n  }\n  return string.indexOf(substring, start) !== -1;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n * @return {string}\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n\n/**\n * Trims a string on the end, removing whitespace characters.\n * @param {string} str  A string to trim.\n * @return {string} The string, with trailing whitespace removed.\n */\nexport function trimEnd(str) {\n  // TODO(sparhami) Does this get inlined for an ES2019 build?\n  if (str.trimEnd) {\n    return str.trimEnd();\n  }\n\n  return ('_' + str).trim().slice(1);\n}\n\n/**\n * Trims any leading whitespace from a string.\n * @param {string} str  A string to trim.\n * @return {string} The string, with leading whitespace removed.\n */\nexport function trimStart(str) {\n  if (str.trimStart) {\n    return str.trimStart();\n  }\n\n  return (str + '_').trim().slice(0, -1);\n}\n\n/**\n * Wrapper around String.replace that handles asynchronous resolution.\n * @param {string} str\n * @param {RegExp} regex\n * @param {Function|string} replacer\n * @return {!Promise<string>}\n */\nexport function asyncStringReplace(str, regex, replacer) {\n  if (isString(replacer)) {\n    return Promise.resolve(str.replace(regex, replacer));\n  }\n  const stringBuilder = [];\n  let lastIndex = 0;\n\n  str.replace(regex, function (match) {\n    // String.prototype.replace will pass 3 to n number of arguments to the\n    // callback function based on how many capture groups the regex may or may\n    // not contain. We know that the match will always be first, and the\n    // index will always be second to last.\n    const matchIndex = arguments[arguments.length - 2];\n    stringBuilder.push(str.slice(lastIndex, matchIndex));\n    lastIndex = matchIndex + match.length;\n\n    // Store the promise in it's eventual string position.\n    const replacementPromise = replacer.apply(null, arguments);\n    stringBuilder.push(replacementPromise);\n  });\n  stringBuilder.push(str.slice(lastIndex));\n\n  return Promise.all(stringBuilder).then((resolved) => resolved.join(''));\n}\n\n/**\n * Pads the beginning of a string with a substring to a target length.\n * @param {string} s\n * @param {number} targetLength\n * @param {string} padString\n * @return {string}\n */\nexport function padStart(s, targetLength, padString) {\n  if (s.length >= targetLength) {\n    return s;\n  }\n  targetLength = targetLength - s.length;\n  let padding = padString;\n  while (targetLength > padding.length) {\n    padding += padString;\n  }\n  return padding.slice(0, targetLength) + s;\n}\n\n/**\n * Tests if a value is a string.\n * @param {?} s\n * @return {boolean}\n */\nexport function isString(s) {\n  return typeof s == 'string';\n}\n", "/* @const */\nconst {hasOwnProperty: hasOwn_, toString: toString_} = Object.prototype;\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString_.call(value) === '[object Object]';\n}\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {d, s, t} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    for (const key of Object.keys(s)) {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          continue;\n        }\n      }\n      t[key] = newValue;\n    }\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * @param {!Object|null|undefined} o1\n * @param {!Object|null|undefined} o2\n * @return {boolean}\n */\nexport function objectsEqualShallow(o1, o2) {\n  if (o1 == null || o2 == null) {\n    // Null is only equal to null, and undefined to undefined.\n    return o1 === o2;\n  }\n\n  for (const k in o1) {\n    if (o1[k] !== o2[k]) {\n      return false;\n    }\n  }\n  for (const k in o2) {\n    if (o2[k] !== o1[k]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {T} obj\n * @param {string} prop\n * @param {function(T, string):R} factory\n * @return {R}\n * @template T,R\n */\nexport function memo(obj, prop, factory) {\n  let result = /** @type {?R} */ (obj[prop]);\n  if (result === undefined) {\n    result = factory(obj, prop);\n    obj[prop] = result;\n  }\n  return result;\n}\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = map();\n  for (const k in obj) {\n    if (!hasOwn(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (const part of parts) {\n    if (\n      part &&\n      value &&\n      value[part] !== undefined &&\n      typeof value == 'object' &&\n      hasOwn(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n", "// Export all type-checking helpers for convenience\nexport {isArray} from './array';\nexport {isEnumValue} from './enum';\nexport {isString} from './string';\nexport {isObject} from './object';\n\n/**\n * Determines if value is an ELement\n * @param {*} value\n * @return {boolean}\n */\nexport function isElement(value) {\n  return value?.nodeType == /* Node.ELEMENT_NODE */ 1;\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n", "import {isElement} from '#core/types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n/**\n * Converts an element to a readable string; all other types are unchanged.\n * TODO(rcebulko): Unify with log.js\n * @param {*} val\n * @return {*}\n */\nexport function elementStringOrPassThru(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (isElement(val)) {\n    val = /** @type {Element} */ (val);\n    return val.tagName.toLowerCase() + (val.id ? `#${val.id}` : '');\n  }\n  return val;\n}\n\n/**\n * Tests if an error message contains the user sentinel.\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbedMessage(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n/**\n * Strips the user error sentinel from an error message.\n * @param {string} message\n * @return {string} The new message without USER_ERROR_SENTINEL\n */\nexport function stripUserError(message) {\n  return message.replace(USER_ERROR_SENTINEL, '');\n}\n", "import {elementStringOrPassThru} from '#core/error/message-helpers';\nimport {isArray, isElement, isString} from '#core/types';\nimport {remove} from '#core/types/array';\n\n/**\n * @fileoverview This file provides the base implementation for assertion\n * functions. Most files should never import from this; instead, import from\n * `dev` or `user`. It is also used by the Log class for its assertions.\n */\n\n/**\n * A base assertion function, provided to various assertion helpers.\n * @typedef {function(?, string=, ...*):?|function(?, !Array<*>)}\n */\nexport let AssertionFunctionDef;\n\n/**\n * Throws an error if the second argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n * @param {?string} sentinel\n * @param {T} shouldBeTruthy\n * @param {string} opt_message\n * @param {...*} var_args Arguments substituted into %s in the message\n * @return {T}\n * @template T\n * @throws {Error} when shouldBeTruthy is not truthy.\n */\nexport function assert(\n  sentinel,\n  shouldBeTruthy,\n  opt_message = 'Assertion failed',\n  var_args\n) {\n  if (shouldBeTruthy) {\n    return shouldBeTruthy;\n  }\n\n  // Include the sentinel string if provided and not already present\n  if (sentinel && opt_message.indexOf(sentinel) == -1) {\n    opt_message += sentinel;\n  }\n\n  // Skip the first 3 arguments to isolate format params\n  // const messageArgs = Array.prototype.slice.call(arguments, 3);\n  // Index at which message args start\n  let i = 3;\n\n  // Substitute provided values into format string in message\n  const splitMessage = opt_message.split('%s');\n  let message = splitMessage.shift();\n  const messageArray = [message];\n\n  while (splitMessage.length) {\n    const subValue = arguments[i++];\n    const nextConstant = splitMessage.shift();\n\n    message += elementStringOrPassThru(subValue) + nextConstant;\n    messageArray.push(subValue, nextConstant.trim());\n  }\n\n  const error = new Error(message);\n  error.messageArray = remove(messageArray, (x) => x !== '');\n  // __AMP_REPORT_ERROR is installed globally per window in the entry point in\n  // AMP documents. It may not be present for Bento/Preact elements on non-AMP\n  // pages.\n  self.__AMP_REPORT_ERROR?.(error);\n  throw error;\n}\n\n/**\n * Asserts types, backbone of `assertNumber`, `assertString`, etc.\n *\n * It understands array-based \"id\"-contracted messages.\n *\n * Otherwise creates a sprintf syntax string containing the optional message or the\n * default. The `subject` of the assertion is added at the end.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {T} subject\n * @param {*} shouldBeTruthy\n * @param {string} defaultMessage\n * @param {!Array<*>|string=} opt_message\n * @return {T}\n * @template T\n * @private\n */\nfunction assertType_(\n  assertFn,\n  subject,\n  shouldBeTruthy,\n  defaultMessage,\n  opt_message\n) {\n  if (isArray(opt_message)) {\n    assertFn(\n      shouldBeTruthy,\n      /** @type {!Array} */ (opt_message).concat([subject])\n    );\n  } else {\n    assertFn(shouldBeTruthy, `${opt_message || defaultMessage}: %s`, subject);\n  }\n\n  return subject;\n}\n\n/**\n * Throws an error if the first argument isn't an Element.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeElement\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Element} The value of shouldBeTrueish.\n * @throws {Error} when shouldBeElement is not an Element\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertElement(assertFn, shouldBeElement, opt_message) {\n  return /** @type {!Element} */ (\n    assertType_(\n      assertFn,\n      shouldBeElement,\n      isElement(shouldBeElement),\n      'Element expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a string. The string can\n * be empty.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeString\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {string} The string value. Can be an empty string.\n * @throws {Error} when shouldBeString is not an String\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertString(assertFn, shouldBeString, opt_message) {\n  return /** @type {string} */ (\n    assertType_(\n      assertFn,\n      shouldBeString,\n      isString(shouldBeString),\n      'String expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a number. The allowed values\n * include `0` and `NaN`.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeNumber\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {number} The number value. The allowed values include `0`\n *   and `NaN`.\n * @throws {Error} when shouldBeNumber is not an Number\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertNumber(assertFn, shouldBeNumber, opt_message) {\n  return /** @type {number} */ (\n    assertType_(\n      assertFn,\n      shouldBeNumber,\n      typeof shouldBeNumber == 'number',\n      'Number expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument is not an array.\n * The array can be empty.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeArray\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Array} The array value\n * @throws {Error} when shouldBeArray is not an Array\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertArray(assertFn, shouldBeArray, opt_message) {\n  return /** @type {!Array} */ (\n    assertType_(\n      assertFn,\n      shouldBeArray,\n      isArray(shouldBeArray),\n      'Array expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a boolean.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeBoolean\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {boolean} The boolean value.\n * @throws {Error} when shouldBeBoolean is not an Boolean\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertBoolean(assertFn, shouldBeBoolean, opt_message) {\n  return /** @type {boolean} */ (\n    assertType_(\n      assertFn,\n      shouldBeBoolean,\n      !!shouldBeBoolean === shouldBeBoolean,\n      'Boolean expected',\n      opt_message\n    )\n  );\n}\n", "import * as mode from '#core/mode';\n\nimport * as assertions from './base';\n\n/**\n * @fileoverview This file provides the entrypoint for dev assertions. It's\n * designed so all functions are pure function calls to improve inlining. All\n * functions in this file get DCE'd away during compilation.\n */\n\n/**\n * This will never execute regardless, but will be included on unminified builds\n * builds. It will be DCE'd away from minified builds, and so can be used to\n * validate that Babel is properly removing dev assertions in minified builds.\n */\nfunction devAssertDceCheck() {\n  if (self.__AMP_ASSERTION_CHECK) {\n    console /*OK*/\n      .log('__devAssert_sentinel__');\n  }\n}\n\n/**\n * Throws an error if the first argument isn't trueish. Mirrors devAssert in\n * src/log.js.\n * @param {T} shouldBeTruthy\n * @param {string=} opt_message\n * @param {*=} opt_1 Optional argument (var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T}\n * @template T\n * @throws {Error} when shouldBeTruthy is not truthy.\n * @closurePrimitive {asserts.truthy}\n */\nexport function devAssert(\n  shouldBeTruthy,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  if (mode.isMinified()) {\n    return shouldBeTruthy;\n  }\n  devAssertDceCheck();\n\n  return assertions.assert(\n    '',\n    shouldBeTruthy,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n\n/**\n * Throws an error if the first argument isn't an Element.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeElement\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Element} The value of shouldBeTrueish.\n * @throws {Error} when shouldBeElement is not an Element\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertElement(shouldBeElement, opt_message) {\n  if (mode.isMinified()) {\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertElement(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeElement,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a string. The string can\n * be empty.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeString\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {string} The string value. Can be an empty string.\n * @throws {Error} when shouldBeString is not an String\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertString(shouldBeString, opt_message) {\n  if (mode.isMinified()) {\n    return /** @type {string} */ (shouldBeString);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertString(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeString,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a number. The allowed values\n * include `0` and `NaN`.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeNumber\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {number} The number value. The allowed values include `0`\n *   and `NaN`.\n * @throws {Error} when shouldBeNumber is not an Number\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertNumber(shouldBeNumber, opt_message) {\n  if (mode.isMinified()) {\n    return /** @type {number} */ (shouldBeNumber);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertNumber(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeNumber,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument is not an array.\n * The array can be empty.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeArray\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Array} The array value\n * @throws {Error} when shouldBeArray is not an Array\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertArray(shouldBeArray, opt_message) {\n  if (mode.isMinified()) {\n    return /** @type {!Array} */ (shouldBeArray);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertArray(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeArray,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a boolean.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeBoolean\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {boolean} The boolean value.\n * @throws {Error} when shouldBeBoolean is not an Boolean\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertBoolean(shouldBeBoolean, opt_message) {\n  if (mode.isMinified()) {\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertBoolean(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeBoolean,\n    opt_message\n  );\n}\n", "import {devAssert} from '#core/assert';\n\n/**\n * Key string in an action arguments map for an unparsed object literal string.\n *\n * E.g. for the action in <p on=\"tap:AMP.setState({foo: 'bar'})\",\n * then `args[RAW_OBJECT_ARGS_KEY]` is the string \"{foo: 'bar'}\".\n *\n * The action service delegates parsing of object literals to the corresponding\n * extension (in the example above, amp-bind).\n *\n * @see ./service/action-impl.ActionInfoDef\n * @const {string}\n */\nexport const RAW_OBJECT_ARGS_KEY = '__AMP_OBJECT_STRING__';\n\n/**\n * Identifier for an element's default action.\n *\n * @const {string}\n */\nexport const DEFAULT_ACTION = 'activate';\n\n/**\n * Corresponds to degree of user intent, i.e. events triggered with strong\n * user intent have high trust.\n *\n * @enum {number}\n */\nexport const ActionTrust = {\n  /**\n   * Events that are triggered without a user gesture, or triggered by a user\n   * gesture with weak intent (e.g. scroll) are \"low trust\".\n   *\n   * Actions that have low impact on the page's visual state should require\n   * \"low trust\" (e.g. pausing a video).\n   */\n  LOW: 1,\n  /**\n   * Events that are triggered nearly immediately (up to a few seconds) after\n   * a user gesture with strong intent (e.g. tap or swipe) are \"default trust\".\n   *\n   * Actions that can modify the page's visual state (e.g. content jumping)\n   * should require \"default trust\". This is the default required trust level\n   * for actions.\n   */\n  DEFAULT: 2,\n  /**\n   * Events that are triggered immediately after a user gesture with\n   * strong intent (e.g. tap or swipe) are \"high trust\".\n   *\n   * There are no actions yet that require high trust.\n   */\n  HIGH: 3,\n};\n\n/**\n * @param {!ActionTrust} actionTrust\n * @return {string}\n */\nexport function actionTrustToString(actionTrust) {\n  switch (actionTrust) {\n    case ActionTrust.LOW:\n      return 'low';\n    case ActionTrust.HIGH:\n      return 'high';\n    default:\n      devAssert(actionTrust === ActionTrust.DEFAULT);\n      return 'default';\n  }\n}\n", "import {isArray} from '#core/types/array';\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {string|number|boolean|null}\n */\nlet JSONScalarDef;\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {!Object<string, ?*>} (* should be JSONValueDef)\n */\nlet JSONObjectDef;\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {!Array<?*>} (* should be JSONValueDef)\n */\nlet JSONArrayDef;\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {!JSONScalarDef|!JSONObjectDef|!JSONArrayDef}\n */\nlet JSONValueDef;\n\n/**\n * @typedef {{\n *   YOU_MUST_USE: string,\n *   jsonLiteral: function(),\n *   TO_MAKE_THIS_TYPE: string,\n * }}\n */\nlet InternalJsonLiteralTypeDef;\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {string} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(json));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {string} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    opt_onFailed?.(e);\n    return null;\n  }\n}\n\n/**\n * Deeply checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function deepEquals(a, b, depth = 5) {\n  if (!isFinite(depth) || depth < 0) {\n    throw new Error('Invalid depth: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  /** @type {!Array<{a: JSONValueDef, b: JSONValueDef, depth: number}>} */\n  const queue = [{a, b, depth}];\n  while (queue.length > 0) {\n    const {a, b, depth} = queue.shift();\n    // Only check deep equality if depth > 0.\n    if (depth > 0) {\n      if (typeof a !== typeof b) {\n        return false;\n      } else if (isArray(a) && isArray(b)) {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          queue.push({a: a[i], b: b[i], depth: depth - 1});\n        }\n        continue;\n      } else if (a && b && typeof a === 'object' && typeof b === 'object') {\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        if (keysA.length !== keysB.length) {\n          return false;\n        }\n        for (const k of keysA) {\n          queue.push({a: a[k], b: b[k], depth: depth - 1});\n        }\n        continue;\n      }\n    }\n    // If we get here, then depth == 0 or (a, b) are primitives.\n    if (a !== b) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * This helper function handles configurations specified in a JSON format.\n *\n * It allows the configuration is to be written in plain JS (which has better\n * dev ergonomics like comments and trailing commas), and allows the\n * configuration to be transformed into an efficient JSON-parsed representation\n * in the dist build. See https://v8.dev/blog/cost-of-javascript-2019#json\n *\n * @param {!Object} obj\n * @return {!JsonObject}\n */\nexport function jsonConfiguration(obj) {\n  return /** @type {!JsonObject} */ (obj);\n}\n\n/**\n * This converts an Object into a suitable type to be used in `includeJsonLiteral`.\n * This doesn't actually do any conversion, it only changes the closure type.\n *\n * @param {?JSONValueDef} value\n * @return {!InternalJsonLiteralTypeDef}\n */\nexport function jsonLiteral(value) {\n  return /** @type {!InternalJsonLiteralTypeDef} */ (value);\n}\n\n/**\n * Allows inclusion of a variable (that's wrapped in a jsonLiteral\n * call) to be included inside a jsonConfiguration.\n *\n * @param {!InternalJsonLiteralTypeDef} value\n * @return {*}\n */\nexport function includeJsonLiteral(value) {\n  return value;\n}\n", "/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {?Window} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n/**\n * Returns the associated Window for a node.\n *\n * @param {!Node} node\n * @return {!Window}\n */\nexport function getWin(node) {\n  return toWin(\n    (node.ownerDocument || /** @type {!Document} */ (node)).defaultView\n  );\n}\n", "/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n", "import * as mode from '#core/mode';\nimport {dict} from '#core/types/object';\nimport {parseJson} from '#core/types/object/json';\nimport {getWin} from '#core/window';\n\nimport {childElementsByTag, matches} from './query';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/**\n * @typedef {{\n *   bubbles: (boolean|undefined),\n *   cancelable: (boolean|undefined),\n * }}\n */\nexport let CustomEventOptionsDef;\n\n/** @const {!CustomEventOptionsDef} */\nconst DEFAULT_CUSTOM_EVENT_OPTIONS = {bubbles: true, cancelable: true};\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  const win = getWin(parent);\n  if (mode.isEsm() || win.MutationObserver) {\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise((resolve) => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available and ready.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBodyOpen(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyOpenPromise(doc) {\n  return new Promise((resolve) => waitForBodyOpen(doc, resolve));\n}\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  element.parentElement?.removeChild(element);\n}\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element|!DocumentFragment} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node=} after\n */\nexport function insertAfterOrAtStart(root, element, after = null) {\n  if (!after) {\n    insertAtStart(root, element);\n    return;\n  }\n  const before = after.nextSibling;\n  root.insertBefore(element, before);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n */\nexport function insertAtStart(root, element) {\n  root.insertBefore(element, root.firstChild);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  // Check isShadowRoot() is only needed for the polyfill case.\n  for (\n    n = node;\n    !!n.parentNode && !isShadowRoot(/** @type {HTMLElement} */ (n));\n    n = n.parentNode\n  ) {}\n  return n;\n}\n\n/**\n * Determines if value is actually a `ShadowRoot` node.\n * @param {?HTMLElement} value\n * @return {boolean}\n */\nexport function isShadowRoot(value) {\n  if (!value) {\n    return false;\n  }\n  // Node.nodeType == DOCUMENT_FRAGMENT to speed up the tests. Unfortunately,\n  // nodeType of DOCUMENT_FRAGMENT is used currently for ShadowRoot nodes.\n  if (value.tagName == 'I-AMPHTML-SHADOW-ROOT') {\n    return true;\n  }\n  return (\n    value.nodeType == /* DOCUMENT_FRAGMENT */ 11 &&\n    Object.prototype.toString.call(value) === '[object ShadowRoot]'\n  );\n}\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!HTMLElement} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(\n  element,\n  opt_computeParamNameFunc,\n  opt_paramPattern\n) {\n  const computeParamNameFunc = opt_computeParamNameFunc || ((key) => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern || /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while (\n    (currentElement = currentElement.parentNode) &&\n    currentElement != opt_stopNode\n  );\n  return false;\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like.\n * Test cases: https://jsbench.github.io/#f638cacc866a1b2d6e517e6cfa900d6b\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  const {length} = iterable;\n  for (let i = 0; i < length; i++) {\n    cb(iterable[i], i);\n  }\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return (\n    element.tagName == 'SCRIPT' &&\n    element.getAttribute('type')?.toUpperCase() == 'APPLICATION/JSON'\n  );\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return (\n    element.tagName == 'SCRIPT' &&\n    element.getAttribute('type')?.toUpperCase() == 'APPLICATION/LD+JSON'\n  );\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir =\n    doc.body.getAttribute('dir') ||\n    doc.documentElement.getAttribute('dir') ||\n    'ltr';\n  return dir == 'rtl';\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/ focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!HTMLInputElement} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n\n/**\n * A sorting comparator that sorts elements in DOM tree order.\n * A first sibling is sorted to be before its nextSibling.\n * A parent node is sorted to be before a child.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n *\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {number}\n */\nexport function domOrderComparator(element1, element2) {\n  if (element1 === element2) {\n    return 0;\n  }\n\n  const pos = element1.compareDocumentPosition(element2);\n  const precedingOrContains =\n    Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;\n\n  // if fe2 is preceding or contains fe1 then, fe1 is after fe2\n  if (pos & precedingOrContains) {\n    return 1;\n  }\n\n  // if fe2 is following or contained by fe1, then fe1 is before fe2\n  return -1;\n}\n\n/**\n * Like `Element.prototype.toggleAttribute`. This either toggles an attribute\n * on by adding an attribute with an empty value, or toggles it off by removing\n * the attribute. This does not mutate the element if the new state matches\n * the existing state.\n * @param {!Element} element An element to toggle the attribute for.\n * @param {string} name The name of the attribute.\n * @param {boolean=} forced Whether the attribute should be forced on/off. If\n *    not specified, it will be toggled from the current state.\n * @return {boolean} Whether or not the element now has the attribute.\n */\nexport function toggleAttribute(element, name, forced) {\n  const hasAttribute = element.hasAttribute(name);\n  const enabled = forced !== undefined ? forced : !hasAttribute;\n\n  if (enabled !== hasAttribute) {\n    if (enabled) {\n      element.setAttribute(name, '');\n    } else {\n      element.removeAttribute(name);\n    }\n  }\n\n  return enabled;\n}\n\n/**\n * Parses a string as a boolean value using the expanded rules for DOM boolean\n * attributes:\n * - a `null` or `undefined` returns `null`;\n * - an empty string returns `true`;\n * - a \"false\" string returns `false`;\n * - otherwise, `true` is returned.\n *\n * @param {?string|undefined} s\n * @return {boolean|undefined}\n */\nexport function parseBooleanAttribute(s) {\n  return s == null ? undefined : s !== 'false';\n}\n\n/**\n * @param {!Window} win\n * @return {number} The width of the vertical scrollbar, in pixels.\n */\nexport function getVerticalScrollbarWidth(win) {\n  const {documentElement} = win.document;\n  const windowWidth = win./*OK*/ innerWidth;\n  const documentWidth = documentElement./*OK*/ clientWidth;\n  return windowWidth - documentWidth;\n}\n\n/**\n * Dispatches a custom event.\n *\n * @param {!Node} node\n * @param {string} name\n * @param {!Object=} opt_data Event data.\n * @param {!CustomEventOptionsDef=} opt_options\n */\nexport function dispatchCustomEvent(node, name, opt_data, opt_options) {\n  const data = opt_data || {};\n  // Constructors of events need to come from the correct window. Sigh.\n  const event = node.ownerDocument.createEvent('Event');\n\n  // Technically .data is not a property of Event.\n  event.data = data;\n\n  const {bubbles, cancelable} = opt_options || DEFAULT_CUSTOM_EVENT_OPTIONS;\n  event.initEvent(name, bubbles, cancelable);\n  node.dispatchEvent(event);\n}\n\n/**\n * Ensures the child is contained by the parent, but not the parent itself.\n *\n * @param {!Node} parent\n * @param {!Node} child\n * @return {boolean}\n */\nexport function containsNotSelf(parent, child) {\n  return child !== parent && parent.contains(child);\n}\n\n/**\n * Helper method to get the json config from an element <script> tag\n * @param {!Element} element\n * @return {?JsonObject}\n * @throws {!Error} If element does not have exactly one <script> child\n * with type=\"application/json\", or if the <script> contents are not valid JSON.\n */\nexport function getChildJsonConfig(element) {\n  const scripts = childElementsByTag(element, 'script');\n  const {length} = scripts;\n  if (length !== 1) {\n    throw new Error(`Found ${length} <script> children. Expected 1.`);\n  }\n\n  const script = scripts[0];\n  if (!isJsonScriptTag(script)) {\n    throw new Error('<script> child must have type=\"application/json\"');\n  }\n\n  try {\n    return parseJson(script.textContent);\n  } catch {\n    throw new Error('Failed to parse <script> contents. Is it valid JSON?');\n  }\n}\n", "/** @fileoverview Helpers to wrap functions. */\n\n/**\n * Creates a function that is evaluated only once and returns the cached result\n * subsequently.\n *\n * Please note that `once` only takes the function definition into account,\n * so it will return the same cached value even when the arguments are\n * different.\n *\n * @param {function(...):T} fn\n * @return {function(...):T}\n * @template T\n */\nexport function once(fn) {\n  let evaluated = false;\n  let retValue = null;\n  let callback = fn;\n  return (...args) => {\n    if (!evaluated) {\n      retValue = callback.apply(self, args);\n      evaluated = true;\n      callback = null; // GC\n    }\n    return retValue;\n  };\n}\n\n/**\n * Wraps a given callback and applies a rate limit.\n * It throttles the calls so that no consequent calls have time interval\n * smaller than the given minimal interval.\n *\n * @param {!Window} win\n * @param {function(...T):R} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...T)}\n * @template T\n * @template R\n */\nexport function throttle(win, callback, minInterval) {\n  let locker = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {!Object} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    // Lock the fire for minInterval milliseconds\n    locker = win.setTimeout(waiter, minInterval);\n\n    callback.apply(null, args);\n  }\n\n  /**\n   * Waiter function\n   */\n  function waiter() {\n    locker = 0;\n    // If during the period there're invocations queued up, fire once.\n    if (nextCallArgs) {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function (...args) {\n    if (locker) {\n      nextCallArgs = args;\n    } else {\n      fire(args);\n    }\n  };\n}\n\n/**\n * Wraps a given callback and applies a wait timer, so that minInterval\n * milliseconds must pass since the last call before the callback is actually\n * invoked.\n *\n * @param {!Window} win\n * @param {function(...T):R} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...T)}\n * @template T\n * @template R\n */\nexport function debounce(win, callback, minInterval) {\n  let locker = 0;\n  let timestamp = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {?Array} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    callback.apply(null, args);\n  }\n\n  /**\n   * Wait function for debounce\n   */\n  function waiter() {\n    locker = 0;\n    const remaining = minInterval - (win.Date.now() - timestamp);\n    if (remaining > 0) {\n      locker = win.setTimeout(waiter, remaining);\n    } else {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function (...args) {\n    timestamp = win.Date.now();\n    nextCallArgs = args;\n    if (!locker) {\n      locker = win.setTimeout(waiter, minInterval);\n    }\n  };\n}\n", "import {map} from '#core/types/object';\n\nconst QUERY_STRING_REGEX = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  const params = map();\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = QUERY_STRING_REGEX.exec(queryString))) {\n    const name = tryDecodeUriComponent(match[1], match[1]);\n    const value = match[2]\n      ? tryDecodeUriComponent(match[2].replace(/\\+/g, ' '), match[2])\n      : '';\n    params[name] = value;\n  }\n  return params;\n}\n\n/**\n * Parses the query # params.\n * @param {!Window=} opt_win\n * @return {!JsonObject}\n */\nexport function getHashParams(opt_win) {\n  const {location} = opt_win || self;\n  // location.originalHash is set by the viewer when it removes the fragment\n  // from the URL.\n  return parseQueryString(location['originalHash'] || location.hash);\n}\n", "/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex =\n  (typeof env['thirdPartyFrameRegex'] == 'string'\n    ? new RegExp(env['thirdPartyFrameRegex'])\n    : env['thirdPartyFrameRegex']) || /^d-\\d+\\.ampproject\\.net$/;\n\nconst cdnProxyRegex =\n  (typeof env['cdnProxyRegex'] == 'string'\n    ? new RegExp(env['cdnProxyRegex'])\n    : env['cdnProxyRegex']) ||\n  /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/;\n\n/**\n * Check for a custom URL definition in special <meta> tags. Note that this does\n * not allow for distinct custom URLs in AmpDocShadow instances. The shell is\n * allowed to define one set of custom URLs via AMP_CONFIG (recommended) or by\n * including <meta> tags in the shell <head>. Those custom URLs then apply to\n * all AMP documents loaded in the shell.\n * @param {string} name\n * @return {?string}\n * @private\n */\nfunction getMetaUrl(name) {\n  // Avoid exceptions in unit tests\n  if (!self.document || !self.document.head) {\n    return null;\n  }\n\n  // Disallow on proxy origins\n  if (self.location && cdnProxyRegex.test(self.location.origin)) {\n    return null;\n  }\n\n  const metaEl = self.document.head./*OK*/ querySelector(\n    `meta[name=\"${name}\"]`\n  );\n  return (metaEl && metaEl.getAttribute('content')) || null;\n}\n\n/**\n * @typedef {{\n *   thirdParty: string,\n *   thirdPartyFrameHost: string,\n *   thirdPartyFrameRegex: !RegExp,\n *   cdn: string,\n *   cdnProxyRegex: !RegExp,\n *   localhostRegex: !RegExp,\n *   errorReporting: string,\n *   betaErrorReporting: string,\n *   localDev: boolean,\n *   trustedViewerHosts: !Array<!RegExp>,\n *   geoApi: ?string,\n * }}\n */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex,\n  cdn:\n    env['cdnUrl'] || getMetaUrl('runtime-host') || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting:\n    env['errorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r',\n  betaErrorReporting:\n    env['betaErrorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r-beta',\n  localDev: env['localDev'] || false,\n  /**\n   * These domains are trusted with more sensitive viewer operations such as\n   * propagating the referrer. If you believe your domain should be here,\n   * file the issue on GitHub to discuss. The process will be similar\n   * (but somewhat more stringent) to the one described in the [3p/README.md](\n   * https://github.com/ampproject/amphtml/blob/main/3p/README.md)\n   *\n   * {!Array<!RegExp>}\n   */\n  trustedViewerHosts: [\n    /(^|\\.)google\\.(com?|[a-z]{2}|com?\\.[a-z]{2}|cat)$/,\n    /(^|\\.)gmail\\.(com|dev)$/,\n  ],\n  // Optional fallback API if amp-geo is left unpatched\n  geoApi: env['geoApiUrl'] || getMetaUrl('amp-geo-api'),\n};\n\nexport const config = {\n  urls,\n};\n", "import * as assertions from '#core/assert/base';\nimport {\n  createError,\n  createExpectedError,\n  duplicateErrorIfNecessary,\n} from '#core/error';\nimport {\n  USER_ERROR_EMBED_SENTINEL,\n  USER_ERROR_SENTINEL,\n  elementStringOrPassThru,\n  isUserErrorMessage,\n  stripUserError,\n} from '#core/error/message-helpers';\nimport * as mode from '#core/mode';\nimport {isArray, isString} from '#core/types';\nimport {once} from '#core/types/function';\nimport {getHashParams} from '#core/types/string/url';\n\nimport {urls} from '../config';\nimport {getMode} from '../mode';\n\nconst noop = () => {};\n\n// These are exported here despite being defined elswhere to avoid updating\n// imports across many files for now.\nexport {USER_ERROR_SENTINEL, isUserErrorMessage};\n\n/**\n * Sets reportError function. Called from error-reporting.js to break cyclic\n * dependency.\n * @param {function(this:Window, Error, (?Element)=): ?|undefined} fn\n */\nexport function setReportError(fn) {\n  self.__AMP_REPORT_ERROR = fn;\n}\n\n/**\n * @enum {number}\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Prefixes `internalRuntimeVersion` with the `01` channel signifier (for prod.) for\n * extracted message URLs.\n * (Specific channel is irrelevant: message tables are invariant on internal version.)\n * @return {string}\n */\nconst messageUrlRtv = () => `01${mode.version()}`;\n\n/**\n * Gets a URL to display a message on amp.dev.\n * @param {string} id\n * @param {!Array} interpolatedParts\n * @return {string}\n */\nconst externalMessageUrl = (id, interpolatedParts) =>\n  interpolatedParts.reduce(\n    (prefix, arg) => `${prefix}&s[]=${messageArgToEncodedComponent(arg)}`,\n    `https://log.amp.dev/?v=${messageUrlRtv()}&id=${encodeURIComponent(id)}`\n  );\n\n/**\n * URL to simple log messages table JSON file, which contains an Object<string, string>\n * which maps message id to full message template.\n * @return {string}\n */\nconst externalMessagesSimpleTableUrl = () =>\n  `${urls.cdn}/rtv/${messageUrlRtv()}/log-messages.simple.json`;\n\n/**\n * @param {*} arg\n * @return {string}\n */\nconst messageArgToEncodedComponent = (arg) =>\n  encodeURIComponent(String(elementStringOrPassThru(arg)));\n\n/**\n * @param {!Window=} opt_win\n * @return {number}\n */\nexport const logHashParam = (opt_win) =>\n  parseInt(getHashParams(opt_win)['log'], 10);\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don\u2019t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(number, boolean):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix = '') {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = getMode().test && win.__AMP_TEST_IFRAME ? win.parent : win;\n\n    /** @private @const {function(number, boolean):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix;\n\n    /** @private {?JsonObject} */\n    this.messages_ = null;\n\n    this.fetchExternalMessagesOnce_ = once(() => {\n      win\n        .fetch(externalMessagesSimpleTableUrl())\n        .then((response) => response.json(), noop)\n        .then((opt_messages) => {\n          if (opt_messages) {\n            this.messages_ = /** @type {!JsonObject} */ (opt_messages);\n          }\n        });\n    });\n\n    // This bound assertion function is capable of handling the format used when\n    // error/assertion messages are extracted. This logic hasn't yet been\n    // migrated to an AMP-independent form for use in core. This binding allows\n    // Log assertion helpers to maintain message-extraction capabilities until\n    // that logic can be moved to core.\n    this.boundAssertFn_ = /** @type {!assertions.AssertionFunctionDef} */ (\n      this.assert.bind(this)\n    );\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    const {win} = this;\n    // No console - can't enable logging.\n    if (\n      !win.console?.log ||\n      // Logging has been explicitly disabled.\n      logHashParam(win) == 0\n    ) {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev) {\n      return LogLevel.INFO;\n    }\n\n    return this.defaultLevelWithFunc_();\n  }\n\n  /**\n   * @param {!Window=} opt_win provided for testing\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevelWithFunc_(opt_win) {\n    // Delegate to the specific resolver.\n    return this.levelFunc_(logHashParam(opt_win), getMode().development);\n  }\n\n  /**\n   * @param {string} tag\n   * @param {!LogLevel} level\n   * @param {!Array} messages\n   * @return {boolean} true if a the message was logged\n   */\n  msg_(tag, level, messages) {\n    if (level > (levelOverride_ ?? this.level_)) {\n      return false;\n    }\n\n    const cs = this.win.console;\n    const fn =\n      {\n        [LogLevel.ERROR]: cs.error,\n        [LogLevel.INFO]: cs.info,\n        [LogLevel.WARN]: cs.warn,\n      }[level] ?? cs.log;\n\n    const args = this.maybeExpandMessageArgs_(messages);\n    // Prefix console message with \"[tag]\".\n    const prefix = `[${tag}]`;\n    if (isString(args[0])) {\n      // Prepend string to avoid breaking string substitutions e.g. %s.\n      args[0] = prefix + ' ' + args[0];\n    } else {\n      args.unshift(prefix);\n    }\n    fn.apply(cs, args);\n\n    return true;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  fine(tag, ...args) {\n    this.msg_(tag, LogLevel.FINE, args);\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  info(tag, ...args) {\n    this.msg_(tag, LogLevel.INFO, args);\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  warn(tag, ...args) {\n    this.msg_(tag, LogLevel.WARN, args);\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  error(tag, ...args) {\n    if (!this.msg_(tag, LogLevel.ERROR, args)) {\n      const error = this.createError.apply(this, args);\n      error.name = tag || error.name;\n      self.__AMP_REPORT_ERROR?.(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  expectedError(tag, ...args) {\n    if (!this.msg_(tag, LogLevel.ERROR, args)) {\n      self.__AMP_REPORT_ERROR?.(this.createExpectedError.apply(this, args));\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    return this.setErrorSuffix_(createError.apply(null, arguments));\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    return this.setErrorSuffix_(createExpectedError.apply(null, arguments));\n  }\n\n  /**\n   * @param {!Error} error\n   * @return {!Error}\n   * @private\n   */\n  setErrorSuffix_(error) {\n    error = duplicateErrorIfNecessary(error);\n\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = stripUserError(error.message);\n    }\n\n    return error;\n  }\n\n  /**\n   * @param {!Array} args\n   * @return {!Array}\n   * @private\n   */\n  maybeExpandMessageArgs_(args) {\n    return isArray(args[0])\n      ? this.expandMessageArgs_(/** @type {!Array} */ (args[0]))\n      : args;\n  }\n\n  /**\n   * Either redirects a pair of (errorId, ...args) to a URL where the full\n   * message is displayed, or displays it from a fetched table.\n   *\n   * This method is used by the output of the `transform-log-methods` babel\n   * plugin. It should not be used directly. Use the (*error|assert*|info|warn)\n   * methods instead.\n   *\n   * @param {!Array} parts\n   * @return {!Array}\n   * @private\n   */\n  expandMessageArgs_(parts) {\n    // First value should exist.\n    const id = parts.shift();\n    // Best effort fetch of message template table.\n    // Since this is async, the first few logs might be indirected to a URL even\n    // if in development mode. Message table is ~small so this should be a short\n    // gap.\n    if (getMode(this.win).development) {\n      this.fetchExternalMessagesOnce_();\n    }\n\n    return this.messages_?.[id]\n      ? [this.messages_[id]].concat(parts)\n      : [`More info at ${externalMessageUrl(id, parts)}`];\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {!Array|string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @throws {!Error} When `value` is falsey.\n   * @template T\n   * @closurePrimitive {asserts.truthy}\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    if (isArray(opt_message)) {\n      return this.assert.apply(\n        this,\n        [shouldBeTrueish].concat(\n          this.expandMessageArgs_(/** @type {!Array} */ (opt_message))\n        )\n      );\n    }\n\n    return assertions.assert.apply(\n      null,\n      [this.suffix_].concat(Array.prototype.slice.call(arguments))\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertElement(shouldBeElement, opt_message) {\n    return assertions.assertElement(\n      this.boundAssertFn_,\n      shouldBeElement,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertString(shouldBeString, opt_message) {\n    return assertions.assertString(\n      this.boundAssertFn_,\n      shouldBeString,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    return assertions.assertNumber(\n      this.boundAssertFn_,\n      shouldBeNumber,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument is not an array.\n   * The array can be empty.\n   *\n   * @param {*} shouldBeArray\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Array} The array value\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertArray(shouldBeArray, opt_message) {\n    return assertions.assertArray(\n      this.boundAssertFn_,\n      shouldBeArray,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    return assertions.assertBoolean(\n      this.boundAssertFn_,\n      shouldBeBoolean,\n      opt_message\n    );\n  }\n}\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.__AMP_LOG = self.__AMP_LOG || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n};\n\nconst logs = self.__AMP_LOG;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?typeof Log}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log constructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log constructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Calls the log constructor with a given level function and suffix.\n * @param {function(number, boolean):!LogLevel} levelFunc\n * @param {string=} opt_suffix\n * @return {!Log}\n */\nfunction callLogConstructor(levelFunc, opt_suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, levelFunc, opt_suffix);\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  // logs.user must exist first to perform the logs.user.win check below\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n\n  if (isFromEmbed(logs.user.win, opt_element)) {\n    return (\n      logs.userForEmbed ||\n      (logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL))\n    );\n  }\n  return logs.user;\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  return callLogConstructor(\n    (logNum, development) =>\n      development || logNum >= 1 ? LogLevel.FINE : LogLevel.WARN,\n    suffix\n  );\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  return (\n    logs.dev ||\n    (logs.dev = callLogConstructor((logNum) =>\n      logNum >= 3 ? LogLevel.FINE : logNum >= 2 ? LogLevel.INFO : LogLevel.OFF\n    ))\n  );\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nfunction isFromEmbed(win, opt_element) {\n  return opt_element && opt_element.ownerDocument.defaultView != win;\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function devAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  if (mode.isMinified()) {\n    return shouldBeTrueish;\n  }\n  if (self.__AMP_ASSERTION_CHECK) {\n    // This will never execute regardless, but will be included on unminified\n    // builds. It will be DCE'd away from minified builds, and so can be used to\n    // validate that Babel is properly removing dev assertions in minified\n    // builds.\n    console /*OK*/\n      .log('__devAssert_sentinel__');\n  }\n\n  return dev()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function userAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  return user()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n", "import {ownProperty} from '#core/types/object';\nimport {tryFocus} from '#core/dom';\nimport {userAssert} from '#utils/log';\n\nconst TAG = 'amp-autocomplete';\n\n/**\n * Inline implementation of autocomplete. This supports autocompleting\n * multiple input values as part of a larger freeform input element.\n * @implements {./autocomplete-binding-def.AutocompleteBindingDef}\n * @package\n */\nexport class AutocompleteBindingInline {\n  /**\n   * Stores the regex match value associated with the portion of the user input to suggest against.\n   * For use when \"inline_\" is true.\n   * @param {!AMP.BaseElement} ampElement\n   */\n  constructor(ampElement) {\n    const {element} = ampElement;\n    /** @private {!Element} */\n    this.element_ = element;\n\n    /** @private {string} */\n    this.trigger_ = this.element_.getAttribute('inline');\n    userAssert(\n      this.trigger_ !== '',\n      'Empty value for the \"inline\" attr is unsupported, %s. %s',\n      TAG,\n      element\n    );\n    userAssert(\n      this.trigger_ !== '',\n      `AutocompleteBindingInline does not support an empty value in the constructor.`\n    );\n\n    /** @private {?RegExpResult} */\n    this.match_ = null;\n\n    const delimiter = this.trigger_.replace(/([()[{*+.$^\\\\|?])/g, '\\\\$1');\n    const pattern = `((${delimiter}|^${delimiter})(\\\\w+)?)`;\n    this.regex_ = new RegExp(pattern, 'gm');\n  }\n\n  /**\n   * Returns true if a match on the publisher-provided trigger is found in the input element value.\n   * Otherwise, should not display any suggestions.\n   * @param {!HTMLInputElement} inputEl\n   * @return {boolean}\n   */\n  shouldAutocomplete(inputEl) {\n    const match = this.getClosestPriorMatch_(this.regex_, inputEl);\n    this.match_ = match;\n    return !!match;\n  }\n\n  /**\n   * Finds the closest string in the user input prior to the cursor\n   * to display suggestions.\n   * @param {RegExp} regex\n   * @param {!HTMLInputElement} inputEl\n   * @return {?RegExpResult}\n   * @private\n   */\n  getClosestPriorMatch_(regex, inputEl) {\n    if (!regex) {\n      return null;\n    }\n\n    const {selectionStart: cursor, value} = inputEl;\n    let match, lastMatch;\n\n    while ((match = regex.exec(value)) !== null) {\n      if (match[0].length + ownProperty(match, 'index') > cursor) {\n        break;\n      }\n      lastMatch = match;\n    }\n\n    if (\n      !lastMatch ||\n      lastMatch[0].length + ownProperty(lastMatch, 'index') < cursor\n    ) {\n      return null;\n    }\n    return lastMatch;\n  }\n\n  /**\n   * Display suggestions based on the partial string following the trigger\n   * in the input element value.\n   * @param {!HTMLInputElement} unusedInputEl\n   * @return {string}\n   */\n  getUserInputForUpdate(unusedInputEl) {\n    if (!this.match_ || !this.match_[0]) {\n      return '';\n    }\n    return this.match_[0].slice(this.trigger_.length);\n  }\n\n  /**\n   * Replace the user input matched in the input element value with the\n   * selected item value from the autocomplete suggestions.\n   * @param {string} selection\n   * @param {!HTMLInputElement} inputEl\n   * @param {string} userInput\n   * @return {string}\n   */\n  getUserInputForUpdateWithSelection(selection, inputEl, userInput) {\n    if (!this.match_) {\n      return inputEl.value;\n    }\n    let cursor = inputEl.selectionStart;\n    const startIndex = Number(ownProperty(this.match_, 'index'));\n    const userInputLength = userInput.length;\n    if (cursor >= startIndex + userInputLength) {\n      cursor = cursor - userInputLength;\n    }\n\n    tryFocus(inputEl);\n    cursor = cursor + selection.length + 1;\n    inputEl.setSelectionRange(cursor, cursor);\n    this.match_ = null;\n\n    const {value} = inputEl;\n\n    const pre = value.slice(0, startIndex + this.trigger_.length);\n    const post = value.slice(\n      startIndex + this.trigger_.length + userInputLength\n    );\n    return pre + selection + ' ' + post;\n  }\n\n  /**\n   * @param {string} unusedUserInput\n   * @param {!HTMLInputElement} unusedInputEl\n   */\n  resetInputOnWrapAround(unusedUserInput, unusedInputEl) {}\n\n  /**\n   * Always accept the \"suggest-first\" attribute regardless of filter type.\n   * This is because this binding does not perform any highlighting via the\n   * SelectionAPI when a user navigates to an unselected suggestion item.\n   * @return {boolean}\n   */\n  shouldSuggestFirst() {\n    return this.element_.hasAttribute('suggest-first');\n  }\n\n  /**\n   * Never show suggestions on focus because focus occurs every selection.\n   * @return {boolean}\n   */\n  shouldShowOnFocus() {\n    return false;\n  }\n\n  /**\n   * @param {!HTMLInputElement} unusedInputEl\n   * @param {string} unusedNewValue\n   * @param {string} unusedUserInput\n   */\n  displayActiveItemInInput(unusedInputEl, unusedNewValue, unusedUserInput) {}\n\n  /**\n   * @param {HTMLInputElement} unusedInputEl\n   */\n  removeSelectionHighlighting(unusedInputEl) {}\n\n  /**\n   * If results are not showing or there is no actively navigated-to suggestion item,\n   * the user should be able to 'Enter' to add a new line.\n   * @param {boolean} activeElement\n   * @return {boolean}\n   */\n  shouldPreventDefaultOnEnter(activeElement) {\n    return activeElement;\n  }\n}\n", "import {user} from '#utils/log';\n\n/**\n * Single implementation of autocomplete. This supports autocompleting\n * a single input value in its entirety.\n * @implements {./autocomplete-binding-def.AutocompleteBindingDef}\n * @package\n */\nexport class AutocompleteBindingSingle {\n  /**\n   * @param {!AMP.BaseElement} ampElement\n   */\n  constructor(ampElement) {\n    const {element} = ampElement;\n    /**\n     * The Single implementation of autocomplete should highlight\n     * the diff between the user input and the active suggestion\n     * when the attribute \"suggest-first\" is present.\n     * See displayActiveItemInInput() for more.\n     * @private {boolean}\n     */\n    this.shouldSuggestFirst_ = element.hasAttribute('suggest-first');\n    const filter = element.getAttribute('filter');\n    if (this.shouldSuggestFirst_ && filter !== 'prefix') {\n      this.shouldSuggestFirst_ = false;\n      user().warn(\n        'AMP-AUTOCOMPLETE',\n        '\"suggest-first\" expected \"filter\" type \"prefix\".'\n      );\n    }\n\n    /**\n     * The Single implementation of autocomplete will allow form\n     * submission with selection when \"submit-on-enter\" is present.\n     * @private {boolean}\n     */\n    this.submitOnEnter_ = element.hasAttribute('submit-on-enter');\n  }\n\n  /**\n   * Always try to autocomplete.\n   * @param {!HTMLInputElement} unusedInputEl\n   * @return {boolean}\n   */\n  shouldAutocomplete(unusedInputEl) {\n    return true;\n  }\n\n  /**\n   * The user input for generating suggestions is the full entry in the input element so far.\n   * @param {?HTMLInputElement} inputEl\n   * @return {string}\n   */\n  getUserInputForUpdate(inputEl) {\n    return inputEl.value || '';\n  }\n\n  /**\n   * Returns the full selection.\n   * @param {string} selection\n   * @param {!HTMLInputElement} unusedInputEl\n   * @param {string} unusedInput\n   * @return {string}\n   */\n  getUserInputForUpdateWithSelection(selection, unusedInputEl, unusedInput) {\n    return selection;\n  }\n\n  /**\n   * Input element value should be reset to the partially recorded user input.\n   * @param {string} userInput\n   * @param {!HTMLInputElement} inputEl\n   */\n  resetInputOnWrapAround(userInput, inputEl) {\n    inputEl.value = userInput;\n  }\n\n  /** @return {boolean} */\n  shouldSuggestFirst() {\n    return this.shouldSuggestFirst_;\n  }\n\n  /**\n   * Always display suggestions if there are any on focus.\n   * @return {boolean}\n   */\n  shouldShowOnFocus() {\n    return true;\n  }\n\n  /**\n   * Replace the input element value with the navigated-to suggestion item and\n   * highlight the difference between the possible selection and the user input.\n   *\n   * e.g. User input \"ba\" + navigation to \"banana\" will display \"ba|nana|\",\n   * where |nana| is highlighted in the input field via the SelectionAPI.\n   * @param {!HTMLInputElement} inputEl\n   * @param {string} newValue\n   * @param {string} userInput\n   */\n  displayActiveItemInInput(inputEl, newValue, userInput) {\n    inputEl.value = newValue;\n\n    // Should highlight when \"suggest-first\" is present.\n    if (this.shouldSuggestFirst_) {\n      inputEl.setSelectionRange(userInput.length, newValue.length);\n    }\n  }\n\n  /**\n   * Remove any highlighting via the SelectionAPI.\n   * @param {HTMLInputElement} inputEl\n   */\n  removeSelectionHighlighting(inputEl) {\n    const inputLength = inputEl.value.length;\n    inputEl.setSelectionRange(inputLength, inputLength);\n  }\n\n  /**\n   * If results are showing or the publisher provided \"submit-on-enter\",\n   * the user should only be able to 'Enter' to select a suggestion.\n   * @param {boolean} unusedActiveElement\n   * @return {boolean}\n   */\n  shouldPreventDefaultOnEnter(unusedActiveElement) {\n    return !this.submitOnEnter_;\n  }\n}\n", "export const CSS = \"amp-autocomplete,amp-autocomplete>input,amp-autocomplete>textarea{font-family:sans-serif}amp-autocomplete>input,amp-autocomplete>textarea{border-radius:4px;box-sizing:border-box}.i-amphtml-autocomplete-results{position:absolute;top:100%;width:calc(100% + 1rem);min-width:calc(2em + 2rem);max-height:40vh;margin-top:.5rem;margin-left:-.5rem;border-radius:4px;overflow-y:auto;overflow-x:hidden;background-color:#fff;box-shadow:0px 2px 4px 0px rgba(0,0,0,.5);z-index:10}.i-amphtml-autocomplete-results-up{top:auto;bottom:100%;margin-bottom:.5rem}.i-amphtml-autocomplete-item{position:relative;padding:.5rem 1rem;cursor:pointer}.i-amphtml-autocomplete-item:first-child{border-radius:4px 4px 0px 0px}.i-amphtml-autocomplete-item:nth-last-child(2){border-radius:0px 0px 4px 4px}.i-amphtml-autocomplete-item-active:not([data-disabled]),.i-amphtml-autocomplete-item:hover:not([data-disabled]){background-color:rgba(0,0,0,.15)}.i-amphtml-autocomplete-item[data-disabled]{color:rgba(0,0,0,.33)}\\n/*# sourceURL=/extensions/amp-autocomplete/0.1/amp-autocomplete.css*/\";\n", "/**\n * @enum {number}\n */\nexport const KeyCodes = {\n  ENTER: 13,\n  ESCAPE: 27,\n  SPACE: 32,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n};\n\n/**\n * @enum {string}\n */\nexport const Keys = {\n  ENTER: 'Enter',\n  ESCAPE: 'Escape',\n  SPACE: ' ',\n  LEFT_ARROW: 'ArrowLeft',\n  UP_ARROW: 'ArrowUp',\n  RIGHT_ARROW: 'ArrowRight',\n  DOWN_ARROW: 'ArrowDown',\n  TAB: 'Tab',\n  BACKSPACE: 'Backspace',\n  HOME: 'Home',\n  END: 'End',\n};\n", "/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {userAssert} from '#core/assert';\nimport {isFiniteNumber} from '#core/types';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nexport let DimensionsDef;\n\n/**\n * Elements that the progress can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * This list does not include video players which are found via regex later.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-AD': true,\n  'AMP-ANIM': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-RENDER': true,\n  'AMP-TIKTOK': true,\n  'AMP-TWITTER': true,\n};\n/**\n * All video player components must either have a) \"video\" or b) \"player\" in\n * their name. A few components don't follow this convention for historical\n * reasons, so they are listed individually.\n * @private @const {!RegExp}\n */\nconst videoPlayerTagNameRe =\n  /^amp\\-(video|.+player)|AMP-BRIGHTCOVE|AMP-DAILYMOTION|AMP-YOUTUBE|AMP-VIMEO|AMP-IMA-VIDEO/i;\n\n/**\n * @param {string} s\n * @return {!Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (\n    layout == Layout.FIXED ||\n    layout == Layout.FIXED_HEIGHT ||\n    layout == Layout.RESPONSIVE ||\n    layout == Layout.FILL ||\n    layout == Layout.FLEX_ITEM ||\n    layout == Layout.FLUID ||\n    layout == Layout.INTRINSIC\n  );\n}\n\n/**\n * Whether an element with this layout has a fixed dimension.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeFixed(layout) {\n  return layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT;\n}\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertLength(length) {\n  userAssert(\n    /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n    'Invalid length value: %s',\n    length\n  );\n  return /** @type {!LengthDef} */ (length);\n}\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertLengthOrPercent(length) {\n  userAssert(\n    /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n    'Invalid length or percent value: %s',\n    length\n  );\n  return length;\n}\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  const m = userAssert(\n    /[a-z]+/i.exec(length),\n    'Failed to read units from %s',\n    length\n  );\n  return m[0];\n}\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined|number} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n/**\n * Whether the loading can be shown for the specified element. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  return LOADING_ELEMENTS_[tagName] || isIframeVideoPlayerComponent(tagName);\n}\n\n/**\n * All video player components must either have a) \"video\" or b) \"player\" in\n * their name. A few components don't follow this convention for historical\n * reasons, so they're present in the LOADING_ELEMENTS_ allowlist.\n * @param {string} tagName\n * @return {boolean}\n */\nexport function isIframeVideoPlayerComponent(tagName) {\n  if (tagName == 'AMP-VIDEO') {\n    return false;\n  }\n  return videoPlayerTagNameRe.test(tagName);\n}\n\n/**\n * Configures the supplied element to have a \"fill content\" layout. The\n * exact interpretation of \"fill content\" depends on the element's layout.\n *\n * If `opt_replacedContent` is specified, it indicates whether the \"replaced\n * content\" styling should be applied. Replaced content is not allowed to\n * have its own paddings or border.\n *\n * @param {!Element} element\n * @param {boolean=} opt_replacedContent\n */\nexport function applyFillContent(element, opt_replacedContent) {\n  element.classList.add('i-amphtml-fill-content');\n  if (opt_replacedContent) {\n    element.classList.add('i-amphtml-replaced-content');\n  }\n}\n", "import * as mode from '#core/mode';\n\nimport {urls} from '../config';\nimport {getMode} from '../mode';\n\nconst CUSTOM_TEMPLATES = ['amp-mustache'];\nconst LATEST_VERSION = 'latest';\n\n/**\n * Calculate the base url for any scripts.\n * @param {!Location} location The window's location\n * @param {boolean=} opt_isLocalDev\n * @return {string}\n */\nexport function calculateScriptBaseUrl(location, opt_isLocalDev) {\n  if (opt_isLocalDev) {\n    let prefix = `${location.protocol}//${location.host}`;\n    if (\n      location.protocol == 'about:' ||\n      location.protocol == 'blob:' ||\n      location.protocol == 'data:'\n    ) {\n      prefix = '';\n    }\n    return `${prefix}/dist`;\n  }\n  return urls.cdn;\n}\n\n/**\n * Calculate script url for an extension.\n * @param {!Location} location The window's location\n * @param {string} extensionId\n * @param {string} version\n * @param {boolean=} opt_isLocalDev\n * @return {string}\n */\nexport function calculateExtensionScriptUrl(\n  location,\n  extensionId,\n  version,\n  opt_isLocalDev\n) {\n  const fileExtension = mode.isEsm() ? '.mjs' : '.js';\n  const base = calculateScriptBaseUrl(location, opt_isLocalDev);\n  const rtv = getMode().rtvVersion;\n  const extensionVersion = version ? '-' + version : '';\n  return `${base}/rtv/${rtv}/v0/${extensionId}${extensionVersion}${fileExtension}`;\n}\n\n/**\n * Calculate script url for an entry point.\n * If `opt_rtv` is true, returns the URL matching the current RTV.\n * @param {!Location} location The window's location\n * @param {string} entryPoint\n * @param {boolean=} isLocalDev\n * @param {boolean=} opt_rtv\n * @return {string}\n */\nexport function calculateEntryPointScriptUrl(\n  location,\n  entryPoint,\n  isLocalDev,\n  opt_rtv\n) {\n  const fileExtension = mode.isEsm() ? '.mjs' : '.js';\n  const base = calculateScriptBaseUrl(location, isLocalDev);\n  if (isLocalDev) {\n    return `${base}/${entryPoint}${fileExtension}`;\n  }\n  if (opt_rtv) {\n    return `${base}/rtv/${getMode().rtvVersion}/${entryPoint}${fileExtension}`;\n  }\n  return `${base}/${entryPoint}${fileExtension}`;\n}\n\n/**\n * Parse the extension version from a given script URL.\n * @param {string} scriptUrl\n * @return {?{extensionId: string, extensionVersion: string}}\n */\nexport function parseExtensionUrl(scriptUrl) {\n  if (!scriptUrl) {\n    return null;\n  }\n  // Note that the \"(\\.max)?\" group only applies to local dev.\n  const matches = scriptUrl.match(\n    /^(.*)\\/(.*)-([0-9.]+|latest)(\\.max)?\\.(?:js|mjs)$/i\n  );\n  const extensionId = matches ? matches[2] : undefined;\n  const extensionVersion = matches ? matches[3] : undefined;\n  if (!extensionId || !extensionVersion) {\n    return null;\n  }\n  return {extensionId, extensionVersion};\n}\n\n/**\n * Create the missing amp extension HTML script element.\n * @param {!Window} win\n * @param {string} extensionId\n * @param {string} version\n * @return {!Element} Script object\n */\nexport function createExtensionScript(win, extensionId, version) {\n  const scriptElement = win.document.createElement('script');\n  scriptElement.async = true;\n  if (isIntermediateExtension(extensionId)) {\n    version = '';\n  } else {\n    scriptElement.setAttribute(\n      CUSTOM_TEMPLATES.indexOf(extensionId) >= 0\n        ? 'custom-template'\n        : 'custom-element',\n      extensionId\n    );\n  }\n  scriptElement.setAttribute('data-script', extensionId);\n  scriptElement.setAttribute('i-amphtml-inserted', '');\n  if (mode.isEsm()) {\n    scriptElement.setAttribute('type', 'module');\n  }\n\n  // Propagate nonce to all generated script tags.\n  const currentScript = win.document.head.querySelector('script[nonce]');\n  if (currentScript) {\n    scriptElement.setAttribute('nonce', currentScript.getAttribute('nonce'));\n  }\n\n  // Allow error information to be collected\n  // https://github.com/ampproject/amphtml/issues/7353\n  scriptElement.setAttribute('crossorigin', 'anonymous');\n  let loc = win.location;\n  if (getMode(win).test && win.testLocation) {\n    loc = win.testLocation;\n  }\n  const scriptSrc = calculateExtensionScriptUrl(\n    loc,\n    extensionId,\n    version,\n    getMode(win).localDev\n  );\n  scriptElement.src = scriptSrc;\n  return scriptElement;\n}\n\n/**\n * Returns the extension <script> element and attribute for the given\n * extension ID, if it exists. Otherwise, returns null.\n * @param {!Window} win\n * @param {string} extensionId\n * @param {string} version\n * @param {boolean} latest\n * @param {boolean=} includeInserted If true, includes script elements that\n *   are inserted by the runtime dynamically. Default is true.\n * @return {!Array<!Element>}\n */\nexport function getExtensionScripts(\n  win,\n  extensionId,\n  version,\n  latest,\n  includeInserted = true\n) {\n  // Always ignore <script> elements that have a mismatched RTV.\n  const modifier =\n    ':not([i-amphtml-loaded-new-version])' +\n    (includeInserted ? '' : ':not([i-amphtml-inserted])');\n  // We have to match against \"src\" because a few extensions, such as\n  // \"amp-viewer-integration\", do not have \"custom-element\" attribute.\n  const matches = win.document.head./*OK*/ querySelectorAll(\n    `script[src*=\"/${extensionId}-\"]${modifier}`\n  );\n  const filtered = [];\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const urlParts = parseExtensionUrl(match.src);\n    if (!urlParts) {\n      continue;\n    }\n    const {\n      extensionId: scriptExtensionId,\n      extensionVersion: scriptExtensionVersion,\n    } = urlParts;\n    if (\n      scriptExtensionId == extensionId &&\n      (isIntermediateExtension(extensionId) ||\n        scriptExtensionVersion == version ||\n        (scriptExtensionVersion == LATEST_VERSION && latest))\n    ) {\n      filtered.push(match);\n    }\n  }\n  return filtered;\n}\n\n/**\n * Get list of all the extension JS files.\n * @param {HTMLHeadElement|Element|ShadowRoot|Document} head\n * @return {!Array<{script: HTMLScriptElement, extensionId: string, extensionVersion: string}>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null.\n  if (!head) {\n    return [];\n  }\n  // Note: Some extensions don't have [custom-element] or [custom-template]\n  // e.g. amp-viewer-integration.\n  const list = head.querySelectorAll(\n    'script[custom-element],script[custom-template]'\n  );\n  const scripts = [];\n  for (let i = 0; i < list.length; i++) {\n    const script = list[i];\n    const extensionId =\n      script.getAttribute('custom-element') ||\n      script.getAttribute('custom-template');\n    const urlParts = parseExtensionUrl(script.src);\n    if (extensionId && urlParts) {\n      scripts.push({\n        script,\n        extensionId,\n        extensionVersion: urlParts.extensionVersion,\n      });\n    }\n  }\n  return scripts;\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {!Window} win\n * @param {string} id\n * @param {string} version\n * @return {boolean}\n */\nexport function extensionScriptInNode(win, id, version) {\n  return extensionScriptsInNode(win.document.head).some(\n    ({extensionId, extensionVersion}) =>\n      id == extensionId && version == extensionVersion\n  );\n}\n\n/**\n * @param {string} extensionId\n * @return {boolean}\n */\nfunction isIntermediateExtension(extensionId) {\n  return extensionId.startsWith('_');\n}\n", "/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\nimport {Deferred} from '#core/data-structures/promise';\nimport {getWin} from '#core/window';\n\nimport {dev, devAssert} from '#utils/log';\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   reject: (?function((*))),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (function(new:Object, !Window)|\n *          function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedDoc(ampdoc, id, service) {\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    function () {\n      return service;\n    },\n    /* override */ true\n  );\n}\n\n/**\n * Installs a service override in the scope of an embedded window.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {function(new:Object, !Window)} constructor\n */\nexport function registerServiceBuilderInEmbedWin(embedWin, id, constructor) {\n  registerServiceInternal(\n    embedWin,\n    embedWin,\n    id,\n    constructor,\n    /* override */ true\n  );\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win, id, constructor, opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(\n  nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate\n) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * Reject a service promise.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {*} error\n */\nexport function rejectServicePromiseForDoc(nodeOrDoc, id, error) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  rejectServicePromiseInternal(holder, id, error);\n}\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n/**\n * Returns a service for the given id and window (a per-window singleton). But\n * it looks in the immediate window scope, not the top-level window.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getServiceInEmbedWin(win, id) {\n  return getServiceInternal(win, id);\n}\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * If service `id` is not registered, returns null.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Object}\n */\nexport function getServiceForDocOrNull(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (isServiceRegistered(holder, id)) {\n    return getServiceInternal(holder, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n    getAmpdocServiceHolder(elementOrAmpDoc),\n    id\n  );\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || (win.__AMP_TOP = win);\n}\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window=} opt_topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, opt_topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  const topWin = opt_topWin || getTopWindow(childWin);\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = getWin(nodeOrDoc);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc')\n  );\n}\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n */\nfunction getServiceInternal(holder, id) {\n  devAssert(\n    isServiceRegistered(holder, id),\n    `Expected service ${id} to be registered`\n  );\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    devAssert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    devAssert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    devAssert(s.obj, `Service ${id} constructed to null.`);\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n * @param {boolean=} opt_override\n * @param {boolean=} opt_sharedInstance\n */\nfunction registerServiceInternal(\n  holder,\n  context,\n  id,\n  ctor,\n  opt_override,\n  opt_sharedInstance\n) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      reject: null,\n      context: null,\n      ctor: null,\n      sharedInstance: opt_sharedInstance || false,\n    };\n  }\n\n  if (!opt_override && s.ctor) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n  s.sharedInstance = opt_sharedInstance || false;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const services = getServices(holder);\n  services[id] = emptyServiceHolderWithPromise();\n  return /** @type {!Promise<!Object>} */ (services[id].promise);\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @param {*} error\n */\nfunction rejectServicePromiseInternal(holder, id, error) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.reject) {\n      s.reject(error);\n    }\n    return;\n  }\n\n  services[id] = emptyServiceHolderWithPromise();\n  services[id].reject(error);\n}\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return (s.promise = Promise.resolve(/** @type {!Object} */ (s.obj)));\n    }\n  }\n  return null;\n}\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let services = holder.__AMP_SERVICES;\n  if (!services) {\n    services = holder.__AMP_SERVICES = {};\n  }\n  return services;\n}\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  devAssert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.sharedInstance) {\n      continue;\n    }\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then((instance) =>\n        disposeServiceInternal(id, instance)\n      );\n    }\n  }\n}\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n/**\n * This adopts the service **instance** from the parent.\n *\n * This function is dangerous! Sharing an instance means data can leak to and\n * from a child ampdoc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n */\nexport function adoptServiceForEmbedDoc(ampdoc, id) {\n  const service = getServiceInternal(\n    getAmpdocServiceHolder(devAssert(ampdoc.getParent())),\n    id\n  );\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    function () {\n      return service;\n    },\n    /* override */ false,\n    /* sharedInstance */ true\n  );\n}\n\n/**\n * This adopts the service **factory** from the parent.\n *\n * This function is safer than sharing the service instance, since each ampdoc\n * will create its own instance of the factory (and each instance will have its\n * own instance data). Note that static data is still shared, so it's not 100%\n * foolproof.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n */\nexport function adoptServiceFactoryForEmbedDoc(ampdoc, id) {\n  const parentHolder = getAmpdocServiceHolder(devAssert(ampdoc.getParent()));\n  devAssert(\n    isServiceRegistered(parentHolder, id),\n    `Expected service ${id} to be registered`\n  );\n  const service = getServices(parentHolder)[id];\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    devAssert(service.ctor)\n  );\n}\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.__AMP_SERVICES) {\n    holder.__AMP_SERVICES[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.__AMP_SERVICES && holder.__AMP_SERVICES[id];\n  // All registered services must have a constructor.\n  return !!(service && service.ctor);\n}\n\n/** @return {!ServiceHolderDef} */\nfunction emptyServiceHolderWithPromise() {\n  const deferred = new Deferred();\n  const {promise, reject, resolve} = deferred;\n  promise.catch(() => {}); // avoid uncaught exception when service gets rejected\n  return {\n    obj: null,\n    promise,\n    resolve,\n    reject,\n    context: null,\n    ctor: null,\n  };\n}\n", "import * as dom from '#core/dom';\n\nimport {extensionScriptInNode} from '#service/extension-script';\n\nimport {userAssert} from '#utils/log';\n\nimport {\n  getAmpdoc,\n  getService,\n  getServiceForDocOrNull,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n} from './service-helpers';\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {string} version The extension version.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(\n  win,\n  id,\n  extension,\n  version,\n  opt_element\n) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(\n    win,\n    id,\n    extension,\n    version,\n    opt_element\n  );\n}\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(element, id, extension, opt_element) {\n  return getElementServiceIfAvailableForDoc(\n    element,\n    id,\n    extension,\n    opt_element\n  ).then((service) => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  element,\n  id,\n  extension,\n  opt_element\n) {\n  const s = getServicePromiseOrNullForDoc(element, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  const ampdoc = getAmpdoc(element);\n  return ampdoc\n    .whenExtensionsKnown()\n    .then(() => {\n      const version = ampdoc.getExtensionVersion(extension);\n      if (!version) {\n        return null;\n      }\n      const extensions = getService(ampdoc.win, 'extensions');\n      return extensions.waitForExtension(extension, version);\n    })\n    .then((ext) => {\n      if (!ext) {\n        return null;\n      }\n      // If this service is provided by an element, then we can't depend on\n      // the service (they may not use the element).\n      if (opt_element) {\n        return getServicePromiseOrNullForDoc(element, id);\n      }\n      return getServicePromiseForDoc(element, id);\n    });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given element, if it exists. Falls back to ampdoc scope if the element\n * is not embedded.\n *\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  element,\n  id,\n  extension\n) {\n  const s = getServiceForDocOrNull(element, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  return getElementServiceIfAvailableForDoc(element, id, extension);\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n * @closurePrimitive {asserts.matchesReturn}\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (\n    userAssert(\n      service,\n      'Service %s was requested to be provided through %s, ' +\n        'but %s is not loaded in the current page. To fix this ' +\n        'problem load the JavaScript file for %s in this page.',\n      id,\n      extension,\n      extension,\n      extension\n    )\n  );\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {string} version\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(\n  win,\n  id,\n  extension,\n  version,\n  opt_element\n) {\n  return dom\n    .waitForBodyOpenPromise(win.document)\n    .then(() => {\n      // If there is an extension script wait for it to load before trying\n      // to get the service. Prevents a race condition when everything but\n      // the extensions is in cache. If there is no script then it's either\n      // not present, or the service was defined by a test. In those cases\n      // we don't wait around for an extension that does not exist.\n      const extensions = getService(win, 'extensions');\n\n      // TODO(jpettitt) investigate registerExtension to short circuit\n      // the dom call in extensionScriptsInNode()\n      if (!extensionScriptInNode(extensions.win, extension, version)) {\n        return null;\n      }\n      return extensions.waitForExtension(extension, version);\n    })\n    .then((ext) => {\n      if (!ext) {\n        return null;\n      }\n      // If this service is provided by an element, then we can't depend on\n      // the service (they may not use the element).\n      if (opt_element) {\n        return getServicePromiseOrNull(win, id);\n      }\n      return getServicePromise(win, id);\n    });\n}\n", "import {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from '../element-service';\nimport {\n  getAmpdoc,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocOrNull,\n  getServiceInEmbedWin,\n  getServicePromiseForDoc,\n} from '../service-helpers';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(element, 'access', 'amp-access')\n    );\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(element, 'access', 'amp-access')\n    );\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(element) {\n    return /** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(element, 'subscriptions', 'amp-subscriptions')\n    );\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(element) {\n    return /** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'subscriptions',\n        'amp-subscriptions'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(element) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getServiceForDocOrNull(element, 'action')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/standard-actions-impl.StandardActions}\n   */\n  static standardActionsForDoc(element) {\n    return /** @type {!./service/standard-actions-impl.StandardActions} */ (\n      getServiceForDocOrNull(element, 'standard-actions')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>}\n   */\n  static activityForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>} */ (\n      getElementServiceForDoc(element, 'activity', 'amp-analytics')\n    );\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc')\n    );\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(nodeOrAmpDoc) {\n    return getAmpdoc(nodeOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(element, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(element);\n      Services.extensionsFor(ampdoc.win)./*OK*/ installExtensionForDoc(\n        ampdoc,\n        'amp-analytics'\n      );\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(\n        element,\n        'amp-analytics-instrumentation',\n        'amp-analytics'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'amp-analytics-instrumentation',\n        'amp-analytics'\n      )\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n        element,\n        'bind',\n        'amp-bind'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-script/0.1/amp-script.AmpScriptService>}\n   */\n  static scriptForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-script/0.1/amp-script.AmpScriptService>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n        element,\n        'amp-script',\n        'amp-script'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.CidDef>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.CidDef>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-loader/0.1/amp-loader.LoaderService>}\n   */\n  static loaderServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-loader/0.1/amp-loader.LoaderService>} */ (\n      getElementServiceForDoc(element, 'loader', 'amp-loader')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-standalone/0.1/amp-standalone.StandaloneService>}\n   */\n  static standaloneServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-standalone/0.1/amp-standalone.StandaloneService>} */ (\n      getElementServiceForDoc(element, 'standalone', 'amp-standalone')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return /** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')\n    ).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions')\n    );\n  }\n\n  /**\n   * Returns a service to register callbacks we wish to execute when an\n   * amp-form is submitted.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>}\n   */\n  static formSubmitForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'form-submit-service')\n    );\n  }\n\n  /**\n   * Returns service to listen for `hidden` attribute mutations.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/hidden-observer-impl.HiddenObserver}\n   */\n  static hiddenObserverForDoc(element) {\n    return /** @type {!./service/hidden-observer-impl.HiddenObserver} */ (\n      getServiceForDocOrNull(element, 'hidden-observer')\n    );\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history')\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**s\n   * Returns a promise for the Inputmask service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>}\n   */\n  static inputmaskServiceForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>} */ (\n      getElementServiceIfAvailableForDoc(element, 'inputmask', 'amp-inputmask')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {?./service/loading-indicator.LoadingIndicatorImpl}\n   */\n  static loadingIndicatorOrNull(elementOrAmpDoc) {\n    return /** @type {?./service/loading-indicator.LoadingIndicatorImpl} */ (\n      getServiceForDocOrNull(elementOrAmpDoc, 'loadingIndicator')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!../extensions/amp-next-page/1.0/service.NextPageService}\n   */\n  static nextPageServiceForDoc(elementOrAmpDoc) {\n    return /** @type {!../extensions/amp-next-page/1.0/service.NextPageService} */ (\n      getServiceForDoc(elementOrAmpDoc, 'next-page')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/mutator-interface.MutatorInterface}\n   */\n  static mutatorForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/mutator-interface.MutatorInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'mutator')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/owners-interface.OwnersInterface}\n   */\n  static ownersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/owners-interface.OwnersInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'owners')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform')\n    );\n  }\n\n  /**\n   * Not installed by default; must be installed in extension code before use.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/position-observer/position-observer-impl.PositionObserver}\n   * @throws If the service is not installed.\n   */\n  static positionObserverForDoc(element) {\n    return /** @type {!./service/position-observer/position-observer-impl.PositionObserver} */ (\n      getServiceForDoc(element, 'position-observer')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./preconnect.PreconnectService}\n   */\n  static preconnectFor(window) {\n    return getService(window, 'preconnect');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/resources-interface.ResourcesInterface}\n   */\n  static resourcesForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/resources-interface.ResourcesInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'resources')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/resources-interface.ResourcesInterface>}\n   */\n  static resourcesPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/resources-interface.ResourcesInterface>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'resources')\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService}\n   */\n  static storyVariableService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService} */\n      (getExistingServiceOrNull(win, 'story-variable'))\n    );\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-media-query-service.AmpStoryMediaQueryService}\n   */\n  static storyMediaQueryService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-media-query-service.AmpStoryMediaQueryService} */\n      (getExistingServiceOrNull(win, 'story-media-query'))\n    );\n  }\n\n  /**\n   * Get promise with story request service\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService>}\n   */\n  static storyRequestServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService>} */\n      (getElementServiceIfAvailable(win, 'story-request', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/media-performance-metrics-service.MediaPerformanceMetricsService}\n   */\n  static mediaPerformanceMetricsService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/media-performance-metrics-service.MediaPerformanceMetricsService} */\n      (getExistingServiceOrNull(win, 'media-performance-metrics'))\n    );\n  }\n\n  /**\n   * @param {!Element} el\n   * @return {!Promise<./service/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(el) {\n    return /** @type {!Promise<?./service/localization.LocalizationService>} */ (\n      getServicePromiseForDoc(el, 'localization')\n    );\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?./service/localization.LocalizationService}\n   */\n  static localizationForDoc(element) {\n    return /** @type {?./service/localization.LocalizationService} */ (\n      getServiceForDocOrNull(element, 'localization')\n    );\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>}\n   */\n  static storyAnalyticsServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>} */\n      (\n        getElementServiceIfAvailable(\n          win,\n          'story-analytics',\n          'amp-story',\n          '1.0',\n          true\n        )\n      )\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService}\n   */\n  static storyAnalyticsService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService} */\n      (getExistingServiceOrNull(win, 'story-analytics'))\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(element) {\n    return (\n      /** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(element, 'web-animation', 'amp-animation'))\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/real-time-config/real-time-config-impl.RealTimeConfigManager>}\n   */\n  static realTimeConfigForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/real-time-config/real-time-config-impl.RealTimeConfigManager>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'real-time-config')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   * TODO(dmanek): Add tests for this method.\n   */\n  static storageForTopLevelDoc(elementOrAmpDoc) {\n    const thisAmpdoc = Services.ampdoc(elementOrAmpDoc);\n    const ampdocService = Services.ampdocServiceFor(thisAmpdoc.win);\n    const topAmpdoc = ampdocService.isSingleDoc()\n      ? ampdocService.getSingleDoc()\n      : null;\n    // We need to verify that ampdocs are on the same origin, therefore\n    // we compare the windows of both.\n    const ampdoc =\n      topAmpdoc && topAmpdoc.win == thisAmpdoc.win ? topAmpdoc : thisAmpdoc;\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(ampdoc, 'storage')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getServiceForDoc(elementOrAmpDoc, 'templates')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    // TODO(alabiaga): This will always return the top window's Timer service.\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getServiceInEmbedWin(window, 'timer')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(element) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getServiceForDocOrNull(element, 'url-replace')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(element) {\n    return (\n      /** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (\n        getElementServiceForDoc(\n          element,\n          'userNotificationManager',\n          'amp-user-notification'\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(element) {\n    return (\n      /** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (\n        getElementServiceIfAvailableForDoc(\n          element,\n          'consentPolicyManager',\n          'amp-consent'\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(element, 'geo', 'amp-geo', true)\n    );\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(element) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getServiceForDocOrNull(element, 'url')\n    );\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>}\n   */\n  static variantsForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'variant',\n        'amp-experiment',\n        true\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-manager-impl.VideoManager}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/video-manager-impl.VideoManager} */ (\n      getServiceForDoc(elementOrAmpDoc, 'video-manager')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/viewer-interface.ViewerInterface}\n   */\n  static viewerForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/viewer-interface.ViewerInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'viewer')\n    );\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-interface.ViewerInterface>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-interface.ViewerInterface>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/viewport/viewport-interface.ViewportInterface}\n   */\n  static viewportForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/viewport/viewport-interface.ViewportInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'viewport')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<../amp-cache-url/amp-cache-url.AmpCacheUrlService>}\n   */\n  static cacheUrlServicePromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<?../amp-cache-url/amp-cache-url.AmpCacheUrlService>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cache-url')\n    );\n  }\n}\n", "import {iterateCursor} from '#core/dom';\nimport {getFormAsObject, getSubmitButtonUsed} from '#core/dom/form';\nimport {map} from '#core/types/object';\n\nimport {Services} from '#service';\n\n/**\n * Create a form data wrapper. The wrapper is necessary to provide a common\n * API for FormData objects on all browsers. For example, not all browsers\n * support the FormData#entries or FormData#delete functions.\n *\n * @param {!Window} win\n * @param {!HTMLFormElement=} opt_form\n * @return {!FormDataWrapperInterface}\n */\nexport function createFormDataWrapper(win, opt_form) {\n  const platform = Services.platformFor(win);\n\n  if (platform.isIos() && platform.getMajorVersion() == 11) {\n    return new Ios11NativeFormDataWrapper(opt_form);\n  } else if (FormData.prototype.entries && FormData.prototype.delete) {\n    return new NativeFormDataWrapper(opt_form);\n  } else {\n    return new PolyfillFormDataWrapper(opt_form);\n  }\n}\n\n/**\n * Check if the given object is a FormDataWrapper instance\n * @param {*} o\n * @return {boolean} True if the object is a FormDataWrapper instance.\n */\nexport function isFormDataWrapper(o) {\n  // instanceof doesn't work as expected, so we detect with duck-typing.\n  return !!o && typeof o.getFormData == 'function';\n}\n\n/**\n * A polyfill wrapper for a `FormData` object.\n *\n * If there's no native `FormData#entries`, chances are there are no native\n * methods to read the content of the `FormData` after construction, so the\n * only way to implement `entries` in this class is to capture the fields in\n * the form passed to the constructor (and the arguments passed to the\n * `append` method).\n *\n * For more details on this, see http://mdn.io/FormData.\n *\n * @implements {FormDataWrapperInterface}\n * @visibleForTesting\n */\nexport class PolyfillFormDataWrapper {\n  /** @override */\n  constructor(opt_form = undefined) {\n    /** @private @const {!Object<string, !Array<string>>} */\n    this.fieldValues_ = opt_form ? getFormAsObject(opt_form) : map();\n  }\n\n  /**\n   * @param {string} name\n   * @param {string|!File} value\n   * @param {string=} opt_filename\n   * @override\n   */\n  append(name, value, opt_filename) {\n    // Coercion to string is required to match\n    // the native FormData.append behavior\n    const nameString = String(name);\n    this.fieldValues_[nameString] = this.fieldValues_[nameString] || [];\n    this.fieldValues_[nameString].push(String(value));\n  }\n\n  /** @override */\n  delete(name) {\n    delete this.fieldValues_[name];\n  }\n\n  /** @override */\n  entries() {\n    const fieldEntries = [];\n    Object.keys(this.fieldValues_).forEach((name) => {\n      const values = this.fieldValues_[name];\n      values.forEach((value) => fieldEntries.push([name, value]));\n    });\n\n    // Generator functions are not supported by the current Babel configuration,\n    // so we must manually implement the iterator interface.\n    let nextIndex = 0;\n    return /** @type {!Iterator<!Array<string>>} */ ({\n      next() {\n        return nextIndex < fieldEntries.length\n          ? {value: fieldEntries[nextIndex++], done: false}\n          : {value: undefined, done: true};\n      },\n    });\n  }\n\n  /** @override */\n  getFormData() {\n    const formData = new FormData();\n\n    Object.keys(this.fieldValues_).forEach((name) => {\n      const values = this.fieldValues_[name];\n      values.forEach((value) => formData.append(name, value));\n    });\n\n    return formData;\n  }\n}\n\n/**\n * Wrap the native `FormData` implementation.\n *\n * NOTE: This differs from the standard `FormData` constructor. This constructor\n * includes a submit button if it was used to submit the `opt_form`, where\n * the native `FormData` constructor does not include the submit button used to\n * submit the form.\n * {@link https://xhr.spec.whatwg.org/#dom-formdata}\n * @implements {FormDataWrapperInterface}\n */\nclass NativeFormDataWrapper {\n  /** @override */\n  constructor(opt_form) {\n    /** @private @const {!FormData} */\n    this.formData_ = new FormData(opt_form);\n\n    this.maybeIncludeSubmitButton_(opt_form);\n  }\n\n  /**\n   * If a submit button is focused (because it was used to submit the form),\n   * or was the first submit button present, add its name and value to the\n   * `FormData`, since publishers expect the submit button to be present.\n   * @param {!HTMLFormElement=} opt_form\n   * @private\n   */\n  maybeIncludeSubmitButton_(opt_form) {\n    // If a form is not passed to the constructor,\n    // we are not in a submitting code path.\n    if (!opt_form) {\n      return;\n    }\n\n    const button = getSubmitButtonUsed(opt_form);\n    if (button && button.name) {\n      this.append(button.name, button.value);\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {string|!File} value\n   * @param {string=} opt_filename\n   * @override\n   */\n  append(name, value, opt_filename) {\n    this.formData_.append(name, value);\n  }\n\n  /** @override */\n  delete(name) {\n    this.formData_.delete(name);\n  }\n\n  /** @override */\n  entries() {\n    return this.formData_.entries();\n  }\n\n  /** @override */\n  getFormData() {\n    return this.formData_;\n  }\n}\n\n/**\n * iOS 11 has a bug when submitting empty file inputs.\n * This works around the bug by replacing the empty files with Blob objects.\n */\nclass Ios11NativeFormDataWrapper extends NativeFormDataWrapper {\n  /** @override */\n  constructor(opt_form) {\n    super(opt_form);\n\n    if (opt_form) {\n      iterateCursor(opt_form.elements, (input) => {\n        if (input.type == 'file' && input.files.length == 0) {\n          this.formData_.delete(input.name);\n          this.formData_.append(input.name, new Blob([]), '');\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {string|!File} value\n   * @param {string=} opt_filename\n   * @override\n   */\n  append(name, value, opt_filename) {\n    // Safari 11 breaks on submitting empty File values.\n    if (value && typeof value == 'object' && isEmptyFile(value)) {\n      this.formData_.append(name, new Blob([]), opt_filename || '');\n    } else {\n      this.formData_.append(name, value);\n    }\n  }\n}\n\n/**\n * A wrapper for a native `FormData` object that allows the retrieval of entries\n * in the form data after construction even on browsers that don't natively\n * support `FormData.prototype.entries`.\n *\n * @interface\n * Subclassing `FormData` doesn't work in this case as the transpiler\n *     generates code that calls the super constructor directly using\n *     `Function.prototype.call`. WebKit (Safari) doesn't allow this and\n *     enforces that constructors be called with the `new` operator.\n */\nclass FormDataWrapperInterface {\n  /**\n   * Creates a new wrapper for a `FormData` object.\n   *\n   * If there's no native `FormData#entries`, chances are there are no native\n   * methods to read the content of the `FormData` after construction, so the\n   * only way to implement `entries` in this class is to capture the fields in\n   * the form passed to the constructor (and the arguments passed to the\n   * `append` method).\n   *\n   * This constructor should also add the submitter element as defined in the\n   * HTML spec for Form Submission Algorithm, but is not defined by the standard\n   * when using the `FormData` constructor directly.\n   *\n   * For more details on this, see http://mdn.io/FormData.\n   *\n   * @param {!HTMLFormElement=} opt_form An HTML `<form>` element \u2014 when\n   *     specified, the `FormData` object will be populated with the form's\n   *     current keys/values using the name property of each element for the\n   *     keys and their submitted value for the values. It will also encode file\n   *     input content.\n   */\n  constructor(opt_form) {}\n\n  /**\n   * Appends a new value onto an existing key inside a `FormData` object, or\n   * adds the key if it does not already exist.\n   *\n   * Appending a `File` object is not yet supported and the `filename`\n   * parameter is ignored for this wrapper.\n   *\n   * For more details on this, see http://mdn.io/FormData/append.\n   *\n   * TODO(cvializ): Update file support\n   *\n   * @param {string} unusedName The name of the field whose data is contained in\n   *     `value`.\n   * @param {string|!File} unusedValue The field's value.\n   * @param {string=} opt_filename The filename to use if the value is a file.\n   */\n  append(unusedName, unusedValue, opt_filename) {}\n\n  /**\n   * Remove the given value from the FormData.\n   *\n   * For more details on this, see http://mdn.io/FormData/delete.\n   *\n   * @param {string} unusedName The name of the field to remove from the FormData.\n   */\n  delete(unusedName) {}\n\n  /**\n   * Returns an iterator of all key/value pairs contained in this object.\n   *\n   * For more details on this, see http://mdn.io/FormData/entries.\n   *\n   * @return {!Iterator<!Array<string|!File>>}\n   */\n  entries() {}\n\n  /**\n   * Returns the wrapped native `FormData` object.\n   *\n   * @return {!FormData}\n   */\n  getFormData() {}\n}\n\n/**\n * Check if the given file is an empty file, which is the result of submitting\n * an empty `<input type=\"file\">`. These cause errors when submitting forms\n * in Safari 11.\n *\n * @param {!File} file\n * @return {boolean}\n */\nfunction isEmptyFile(file) {\n  return file.name == '' && file.size == 0;\n}\n", "import {map} from '#core/types/object';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = map();\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n", "import {LruCache} from '#core/data-structures/lru-cache';\nimport * as mode from '#core/mode';\nimport {arrayOrSingleItemToArray} from '#core/types/array';\nimport {dict, hasOwn} from '#core/types/object';\nimport {endsWith} from '#core/types/string';\nimport {parseQueryString} from '#core/types/string/url';\n\nimport {userAssert} from '#utils/log';\n\nimport {urls} from './config';\n\nconst SERVING_TYPE_PREFIX = new Set([\n  // No viewer\n  'c',\n  // In viewer\n  'v',\n  // Ad landing page\n  'a',\n  // Ad\n  'ad',\n]);\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet cachedAnchorEl;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet urlCache;\n\n// eslint-disable-next-line no-script-url\nconst INVALID_PROTOCOLS = ['javascript:', 'data:', 'vbscript:'];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Coerces a url into a location;\n * @function\n * @param {string|!Location} url\n * @return {!Location}\n */\nconst urlAsLocation = (url) =>\n  typeof url == 'string' ? parseUrlDeprecated(url) : url;\n\n/**\n * Returns the correct origin for a given window.\n * TODO(rcebulko): This really belongs under #core/window somewhere, not in url\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * TODO(#34453): The URL constructor isn't supported in IE11, but is supported\n * everywhere else. There's a lot of code paths (and all uses of the LruCache)\n * that are built around this polyfill. Once we can drop IE11 support and just\n * use the URL constructor, we can clear out all of parseWithA, all the URL\n * cache logic (incl. additional caches in other call-sites). Most is guarded by\n * isEsm() and is only included in nomodule builds, but still.\n * @param {string} url\n * @param {boolean=} opt_nocache\n *   Cache is always ignored on ESM builds, see https://go.amp.dev/pr/31594\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!cachedAnchorEl) {\n    cachedAnchorEl = /** @type {!HTMLAnchorElement} */ (\n      self.document.createElement('a')\n    );\n    urlCache = mode.isEsm()\n      ? null\n      : self.__AMP_URL_CACHE || (self.__AMP_URL_CACHE = new LruCache(100));\n  }\n\n  return parseUrlWithA(\n    cachedAnchorEl,\n    url,\n    mode.isEsm() || opt_nocache ? null : urlCache\n  );\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} anchorEl\n * @param {string} url\n * @param {LruCache=} opt_cache\n *   Cache is always ignored on ESM builds, see https://go.amp.dev/pr/31594\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(anchorEl, url, opt_cache) {\n  if (mode.isEsm()) {\n    // Doing this causes the <a> to auto-set its own href to the resolved path,\n    // which would be the baseUrl for the URL constructor.\n    anchorEl.href = '';\n    return /** @type {?} */ (new URL(url, anchorEl.href));\n  }\n\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  anchorEl.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!anchorEl.protocol) {\n    anchorEl.href = anchorEl.href;\n  }\n\n  const info = /** @type {!Location} */ ({\n    href: anchorEl.href,\n    protocol: anchorEl.protocol,\n    host: anchorEl.host,\n    hostname: anchorEl.hostname,\n    port: anchorEl.port == '0' ? '' : anchorEl.port,\n    pathname: anchorEl.pathname,\n    search: anchorEl.search,\n    hash: anchorEl.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if (\n    (info.protocol == 'http:' && info.port == 80) ||\n    (info.protocol == 'https:' && info.port == 443)\n  ) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI anchorEl.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  let origin;\n  if (anchorEl.origin && anchorEl.origin != 'null') {\n    origin = anchorEl.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    origin = info.href;\n  } else {\n    origin = info.protocol + '//' + info.host;\n  }\n  info.origin = origin;\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = mode.isTest() && Object.freeze ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(\n  url,\n  paramString,\n  opt_addToFront\n) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl =\n    mainAndQuery[0] +\n    (mainAndQuery[1]\n      ? opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n\n/**\n * @param {string} key\n * @param {string} value\n * @return {string}\n */\nfunction urlEncodeKeyValue(key, value) {\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n}\n\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  return appendEncodedParamStringToUrl(\n    url,\n    urlEncodeKeyValue(key, value),\n    opt_addToFront\n  );\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Append query string fields and values to a url, only if the key does not\n * exist in current query string.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addMissingParamsToUrl(url, params) {\n  const location = parseUrlDeprecated(url);\n  const existingParams = parseQueryString(location.search);\n  const paramsToAdd = dict({});\n  const keys = Object.keys(params);\n  for (let i = 0; i < keys.length; i++) {\n    if (!hasOwn(existingParams, keys[i])) {\n      paramsToAdd[keys[i]] = params[keys[i]];\n    }\n  }\n  return addParamsToUrl(url, paramsToAdd);\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    let v = params[k];\n    if (v == null) {\n      continue;\n    }\n\n    v = arrayOrSingleItemToArray(v);\n    for (let i = 0; i < v.length; i++) {\n      s.push(urlEncodeKeyValue(k, v[i]));\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  url = urlAsLocation(url);\n  return (\n    url.protocol == 'https:' ||\n    url.hostname == 'localhost' ||\n    url.hostname == '127.0.0.1' ||\n    endsWith(url.hostname, '.localhost')\n  );\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString,\n  elementContext,\n  sourceName = 'source'\n) {\n  userAssert(\n    urlString != null,\n    '%s %s must be available',\n    elementContext,\n    sourceName\n  );\n  userAssert(\n    isSecureUrlDeprecated(urlString) || /^\\/\\//.test(urlString),\n    '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n    elementContext,\n    sourceName,\n    urlString\n  );\n  return urlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  userAssert(\n    /^https?\\:/i.test(urlString),\n    'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n    urlString\n  );\n  return parseUrlDeprecated(urlString).href;\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  return urls.cdnProxyRegex.test(urlAsLocation(url).origin);\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  return urls.localhostRegex.test(urlAsLocation(url).origin);\n}\n\n/**\n * @param {string} uri\n * @return {boolean}\n */\nexport function isAmpScriptUri(uri) {\n  return uri.startsWith('amp-script:');\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  url = urlAsLocation(url);\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  return !(url && INVALID_PROTOCOLS.includes(urlAsLocation(url).protocol));\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const {hash, origin, pathname, search} = parseUrlDeprecated(url);\n  const searchRemoved = removeAmpJsParamsFromSearch(search);\n  return origin + pathname + searchRemoved + hash;\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  // The below regex is a combo of these original patterns. Combining these,\n  // removing the corresponding `.replace` calls, and reusing\n  // removeParamsFromSearch saves ~175B. Matches params in query string:\n  // - /[?&]amp_js[^&]*/   amp_js_*\n  // - /[?&]amp_gsa[^&]*/  amp_gsa\n  // - /[?&]amp_r[^&]*/    amp_r\n  // - /[?&]amp_kit[^&]*/  amp_kit\n  // - /[?&]usqp[^&]*/     usqp (from goog experiment)\n  return removeParamsFromSearch(urlSearch, '(amp_(js[^&=]*|gsa|r|kit)|usqp)');\n}\n\n/**\n * Removes parameters with param name and returns the new search string.\n * @param {string} urlSearch\n * @param {string} paramName\n * @return {string}\n */\nexport function removeParamsFromSearch(urlSearch, paramName) {\n  // TODO: Accept paramNames as an array.\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const paramRegex = new RegExp(`[?&]${paramName}\\\\b[^&]*`, 'g');\n  const search = urlSearch.replace(paramRegex, '').replace(/^[?&]/, '');\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  url = urlAsLocation(url);\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  userAssert(\n    SERVING_TYPE_PREFIX.has(prefix),\n    'Unknown path prefix in url %s',\n    url.href\n  );\n  const domainOrHttpsSignal = path[2];\n  const origin =\n    domainOrHttpsSignal == 's'\n      ? 'https://' + decodeURIComponent(path[3])\n      : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  userAssert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return (\n    origin +\n    path.join('/') +\n    removeAmpJsParamsFromSearch(url.search) +\n    (url.hash || '')\n  );\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  baseUrl = urlAsLocation(baseUrl);\n  if (mode.isEsm() || typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private @visibleForTesting\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  baseUrl = urlAsLocation(baseUrl);\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (relativeUrlString.toLowerCase().startsWith(relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (relativeUrlString.startsWith('//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (relativeUrlString.startsWith('/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return (\n    baseUrl.origin +\n    baseUrl.pathname.replace(/\\/[^/]*$/, '/') +\n    relativeUrlString\n  );\n}\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  userAssert(\n    !(SOURCE_ORIGIN_PARAM in query),\n    'Source origin is not allowed in %s',\n    url\n  );\n}\n\n/**\n * Adds the path to the given url.\n *\n * @param {!Location} url\n * @param {string} path\n * @return {string}\n */\nexport function appendPathToUrl(url, path) {\n  const pathname = url.pathname.replace(/\\/?$/, '/') + path.replace(/^\\//, '');\n  return url.origin + pathname + url.search + url.hash;\n}\n", "import {devAssert, userAssert} from '#core/assert';\nimport {fromIterator, isArray} from '#core/types/array';\nimport {dict, isObject, map} from '#core/types/object';\n\nimport {isExperimentOn} from '#experiments';\n\nimport {Services} from '#service';\n\nimport {user} from '#utils/log';\n\nimport {isFormDataWrapper} from '../form-data-wrapper';\nimport {getMode} from '../mode';\nimport {\n  getCorsUrl,\n  getWinOrigin,\n  isProxyOrigin,\n  parseUrlDeprecated,\n  serializeQueryString,\n} from '../url';\n\n/** @private @const {!Array<string>} */\nconst allowedMethods_ = ['GET', 'POST'];\n\n/** @private @const {!Array<function(*):boolean>} */\nconst allowedJsonBodyTypes_ = [isArray, isObject];\n\n/**\n * Serializes a fetch request so that it can be passed to `postMessage()`,\n * i.e., can be cloned using the\n * [structured clone algorithm](http://mdn.io/Structured_clone_algorithm).\n *\n * The request is serialized in the following way:\n *\n * 1. If the `init.body` is a `FormData`, set content-type header to\n * `multipart/form-data` and transform `init.body` into an\n * `!Array<!Array<string>>` holding the list of form entries, where each\n * element in the array is a form entry (key-value pair) represented as a\n * 2-element array.\n *\n * 2. Return a new object having properties `input` and the transformed\n * `init`.\n *\n * The serialized request is assumed to be de-serialized in the following way:\n *\n * 1.If content-type header starts with `multipart/form-data`\n * (case-insensitive), transform the entry array in `init.body` into a\n * `FormData` object.\n *\n * 2. Pass `input` and transformed `init` to `fetch` (or the constructor of\n * `Request`).\n *\n * Currently only `FormData` used in `init.body` is handled as it's the only\n * type being used in AMP runtime that needs serialization. The `Headers` type\n * also needs serialization, but callers should not be passing `Headers`\n * object in `init`, as that fails `fetchPolyfill` on browsers that don't\n * support fetch. Some serialization-needing types for `init.body` such as\n * `ArrayBuffer` and `Blob` are already supported by the structured clone\n * algorithm. Other serialization-needing types such as `URLSearchParams`\n * (which is not supported in IE and Safari) and `FederatedCredentials` are\n * not used in AMP runtime. `init.body` can also be a string\n * (application/x-www-form-urlencoded) but that doesn't require serialization.\n *\n * @param {string} input The URL of the XHR to convert to structured\n *     cloneable.\n * @param {!FetchInitDef} init The options of the XHR to convert to structured\n *     cloneable.\n * @return {{input: string, init: !FetchInitDef}} The serialized structurally-\n *     cloneable request.\n */\nexport function toStructuredCloneable(input, init) {\n  const newInit = /** @type {!FetchInitDef} */ ({...init});\n  if (isFormDataWrapper(init.body)) {\n    const wrapper = /** @type {!FormDataWrapperInterface} */ (init.body);\n    newInit.headers['Content-Type'] = 'multipart/form-data;charset=utf-8';\n    newInit.body = fromIterator(wrapper.entries());\n  }\n  return {input, init: newInit};\n}\n\n/**\n * De-serializes a fetch response that was made possible to be passed to\n * `postMessage()`, i.e., can be cloned using the\n * [structured clone algorithm](http://mdn.io/Structured_clone_algorithm).\n *\n * The response is assumed to be serialized in the following way:\n *\n * 1. Transform the entries in the headers of the response into an\n * `!Array<!Array<string>>` holding the list of header entries, where each\n * element in the array is a header entry (key-value pair) represented as a\n * 2-element array. The header key is case-insensitive.\n *\n * 2. Include the header entry list and `status` and `statusText` properties\n * of the response in as `headers`, `status` and `statusText` properties of\n * `init`.\n *\n * 3. Include the body of the response serialized as string in `body`.\n *\n * 4. Return a new object having properties `body` and `init`.\n *\n * The response is de-serialized in the following way:\n *\n * 1. If the `Response` type is supported and `responseType` is not\n * document, pass `body` and `init` directly to the constructor of `Response`.\n *\n * 2. Otherwise, populate a fake XHR object to pass to `FetchResponse` as if\n * the response is returned by the fetch polyfill.\n *\n * 3. If `responseType` is `document`, also parse the body and populate\n * `responseXML` as a `Document` type.\n *\n * @param {JsonObject|string|undefined} response The structurally-cloneable\n *     response to convert back to a regular Response.\n * @param {string|undefined} responseType The original response type used to\n *     initiate the XHR.\n * @return {!Response} The deserialized regular response.\n * @private\n */\nexport function fromStructuredCloneable(response, responseType) {\n  userAssert(isObject(response), 'Object expected: %s', response);\n\n  const isDocumentType = responseType == 'document';\n  if (!isDocumentType) {\n    // Use native `Response` type if available for performance. If response\n    // type is `document`, we must fall back to `FetchResponse` polyfill\n    // because callers would then rely on the `responseXML` property being\n    // present, which is not supported by the Response type.\n    return new Response(response['body'], response['init']);\n  }\n\n  const lowercasedHeaders = map();\n  const data = {\n    status: 200,\n    statusText: 'OK',\n    /**\n     * @param {string} name\n     * @return {string}\n     */\n    getResponseHeader(name) {\n      return lowercasedHeaders[String(name).toLowerCase()] || null;\n    },\n  };\n\n  if (response['init']) {\n    const init = response['init'];\n    if (isArray(init.headers)) {\n      /** @type {!Array} */ (init.headers).forEach((entry) => {\n        const headerName = entry[0];\n        const headerValue = entry[1];\n        lowercasedHeaders[String(headerName).toLowerCase()] =\n          String(headerValue);\n      });\n    }\n    if (init.status) {\n      data.status = parseInt(init.status, 10);\n    }\n    if (init.statusText) {\n      data.statusText = String(init.statusText);\n    }\n  }\n\n  return new Response(response['body'] ? String(response['body']) : '', data);\n}\n\n/**\n * Intercepts the XHR and proxies it through the viewer if necessary.\n *\n * XHRs are intercepted if all of the following are true:\n * - The AMP doc is in single doc mode\n * - The requested resource is not a 1p request.\n * - The viewer has the `xhrInterceptor` capability\n * - The Viewer is a trusted viewer or AMP is currently in developement mode\n * - The AMP doc is opted-in for XHR interception (`<html>` tag has\n *   `allow-xhr-interception` attribute)\n *\n * @param {!Window} win\n * @param {?../service/ampdoc-impl.AmpDoc} ampdocSingle\n * @param {string} input The URL of the XHR which may get intercepted.\n * @param {!FetchInitDef} init The options of the XHR which may get\n *     intercepted.\n * @return {!Promise<!Response|undefined>}\n *     A response returned by the interceptor if XHR is intercepted or\n *     `Promise<undefined>` otherwise.\n */\nexport function getViewerInterceptResponse(win, ampdocSingle, input, init) {\n  if (!ampdocSingle) {\n    return Promise.resolve();\n  }\n\n  const whenUnblocked = init.prerenderSafe\n    ? Promise.resolve()\n    : ampdocSingle.whenFirstVisible();\n  const viewer = Services.viewerForDoc(ampdocSingle);\n  const urlIsProxy = isProxyOrigin(input);\n  const viewerCanIntercept = viewer.hasCapability('xhrInterceptor');\n  const interceptorDisabledForLocalDev =\n    init.bypassInterceptorForDev && getMode(win).localDev;\n  if (urlIsProxy || !viewerCanIntercept || interceptorDisabledForLocalDev) {\n    return whenUnblocked;\n  }\n\n  const htmlElement = ampdocSingle.getRootNode().documentElement;\n  const docOptedIn = htmlElement.hasAttribute('allow-xhr-interception');\n  if (!docOptedIn) {\n    return whenUnblocked;\n  }\n\n  return whenUnblocked\n    .then(() => viewer.isTrustedViewer())\n    .then((viewerTrusted) => {\n      if (\n        !(\n          viewerTrusted ||\n          getMode(win).localDev ||\n          isExperimentOn(win, 'untrusted-xhr-interception')\n        )\n      ) {\n        return;\n      }\n      const messagePayload = dict({\n        'originalRequest': toStructuredCloneable(input, init),\n      });\n      return viewer\n        .sendMessageAwaitResponse('xhr', messagePayload)\n        .then((response) =>\n          fromStructuredCloneable(response, init.responseType)\n        );\n    });\n}\n\n/**\n * Sets up URL based on ampCors\n * @param {!Window} win\n * @param {string} input\n * @param {!FetchInitDef} init The options of the XHR which may get\n * intercepted.\n * @return {string}\n */\nexport function setupInput(win, input, init) {\n  devAssert(typeof input == 'string', 'Only URL supported: %s', input);\n  if (init.ampCors !== false) {\n    input = getCorsUrl(win, input);\n  }\n  return input;\n}\n\n/**\n * Sets up and normalizes the FetchInitDef\n *\n * @param {?FetchInitDef=} opt_init Fetch options object.\n * @param {string=} opt_accept The HTTP Accept header value.\n * @return {!FetchInitDef}\n */\nexport function setupInit(opt_init, opt_accept) {\n  const init = opt_init || {};\n\n  // In particular, Firefox does not tolerate `null` values for\n  // `credentials`.\n  const creds = init.credentials;\n  devAssert(\n    creds === undefined || creds == 'include' || creds == 'omit',\n    'Only credentials=include|omit support: %s',\n    creds\n  );\n\n  init.method = normalizeMethod_(init.method);\n  init.headers = init.headers || dict({});\n  if (opt_accept) {\n    init.headers['Accept'] = opt_accept;\n  }\n\n  // In edge a `TypeMismatchError` is thrown when body is set to null.\n  devAssert(init.body !== null, 'fetch `body` can not be `null`');\n\n  return init;\n}\n\n/**\n *\n * Sets up AMPSpecific CORS headers.\n * @param {!Window} win\n * @param {string} input\n * @param {?FetchInitDef=} init\n * @return {!FetchInitDef}\n */\nexport function setupAMPCors(win, input, init) {\n  init = init || {};\n  // For some same origin requests, add AMP-Same-Origin: true header to allow\n  // publishers to validate that this request came from their own origin.\n  const currentOrigin = getWinOrigin(win);\n  const targetOrigin = parseUrlDeprecated(input).origin;\n  if (currentOrigin == targetOrigin) {\n    init['headers'] = init['headers'] || {};\n    init['headers']['AMP-Same-Origin'] = 'true';\n  }\n  return init;\n}\n\n/**\n * @param {?FetchInitDef=} init\n * @return {!FetchInitDef}\n */\nexport function setupJsonFetchInit(init) {\n  const fetchInit = setupInit(init, 'application/json');\n  if (fetchInit.method == 'POST' && !isFormDataWrapper(fetchInit.body)) {\n    // Assume JSON strict mode where only objects or arrays are allowed\n    // as body.\n    devAssert(\n      allowedJsonBodyTypes_.some((test) => test(fetchInit.body)),\n      'body must be of type object or array. %s',\n      fetchInit.body\n    );\n\n    // Content should be 'text/plain' to avoid CORS preflight.\n    fetchInit.headers['Content-Type'] =\n      fetchInit.headers['Content-Type'] || 'text/plain;charset=utf-8';\n    const headerContentType = fetchInit.headers['Content-Type'];\n    // Cast is valid, because we checked that it is not form data above.\n    if (headerContentType === 'application/x-www-form-urlencoded') {\n      fetchInit.body = serializeQueryString(\n        /** @type {!JsonObject} */ (fetchInit.body)\n      );\n    } else {\n      fetchInit.body = JSON.stringify(\n        /** @type {!JsonObject} */ (fetchInit.body)\n      );\n    }\n  }\n  return fetchInit;\n}\n\n/**\n * Normalized method name by uppercasing.\n * @param {string|undefined} method\n * @return {string}\n * @private\n */\nfunction normalizeMethod_(method) {\n  if (method === undefined) {\n    return 'GET';\n  }\n  method = method.toUpperCase();\n  devAssert(\n    allowedMethods_.includes(method),\n    'Only one of %s is currently allowed. Got %s',\n    allowedMethods_.join(', '),\n    method\n  );\n  return method;\n}\n\n/**\n * If 415 or in the 5xx range.\n * @param {number} status\n * @return {boolean}\n */\nfunction isRetriable(status) {\n  return status == 415 || (status >= 500 && status < 600);\n}\n\n/**\n * Returns the response if successful or otherwise throws an error.\n * @param {!Response} response\n * @return {!Promise<!Response>}\n */\nexport function assertSuccess(response) {\n  return new Promise((resolve) => {\n    if (response.ok) {\n      return resolve(response);\n    }\n\n    const {status} = response;\n    const err = user().createError(`HTTP error ${status}`);\n    err['retriable'] = isRetriable(status);\n    // TODO(@jridgewell, #9448): Callers who need the response should\n    // skip processing.\n    err['response'] = response;\n    throw err;\n  });\n}\n", "import {isArray} from '#core/types';\nimport {dict} from '#core/types/object';\n\nimport {userAssert} from '#utils/log';\n\nimport {toStructuredCloneable} from './utils/xhr-utils';\n\n/**\n * @typedef {{\n *   successTemplate: ?(Element|JsonObject|undefined),\n *   errorTemplate: ?(Element|JsonObject|undefined)\n * }}\n */\nexport let SsrTemplateDef;\n\n/**\n * Helper, that manages the proxying of template rendering to the viewer.\n */\nexport class SsrTemplateHelper {\n  /**\n   * @param {string} sourceComponent\n   * @param {!./service/viewer-interface.ViewerInterface} viewer\n   * @param {!./service/template-impl.Templates} templates\n   */\n  constructor(sourceComponent, viewer, templates) {\n    /** @private @const */\n    this.viewer_ = viewer;\n\n    /** @private @const */\n    this.templates_ = templates;\n\n    /** @private @const */\n    this.sourceComponent_ = sourceComponent;\n  }\n\n  /**\n   * Whether the viewer should render templates. A doc-level opt in as\n   * trusted viewers must set this capability explicitly, as a security\n   * measure for potential abuse of feature.\n   * @return {boolean}\n   */\n  isEnabled() {\n    const ampdoc = this.viewer_.getAmpDoc();\n    if (ampdoc.isSingleDoc()) {\n      const htmlElement = ampdoc.getRootNode().documentElement;\n      if (htmlElement.hasAttribute('allow-viewer-render-template')) {\n        return this.viewer_.hasCapability('viewerRenderTemplate');\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Asserts that the viewer is from a trusted origin.\n   *\n   * @param {!Element} element\n   * @return {!Promise}\n   */\n  assertTrustedViewer(element) {\n    return this.viewer_.isTrustedViewer().then((trusted) => {\n      userAssert(\n        trusted,\n        'Refused to attempt SSR in untrusted viewer: ',\n        element\n      );\n    });\n  }\n\n  /**\n   * Proxies xhr and template rendering to the viewer.\n   * Returns the renderable response, for use with applySsrOrCsrTemplate.\n   * @param {!Element} element\n   * @param {!FetchRequestDef} request The fetch/XHR related data.\n   * @param {?SsrTemplateDef=} opt_templates Response templates to pass into\n   *     the payload. If provided, finding the template in the passed in\n   *     element is not attempted.\n   * @param {!Object=} opt_attributes Additional JSON to send to viewer.\n   * @return {!Promise<?JsonObject|string|undefined>}\n   */\n  ssr(element, request, opt_templates = null, opt_attributes = {}) {\n    let mustacheTemplate;\n    if (!opt_templates) {\n      mustacheTemplate = this.templates_.maybeFindTemplate(element);\n    }\n    return this.assertTrustedViewer(element).then(() => {\n      return this.viewer_.sendMessageAwaitResponse(\n        'viewerRenderTemplate',\n        this.buildPayload_(\n          request,\n          mustacheTemplate,\n          opt_templates,\n          opt_attributes\n        )\n      );\n    });\n  }\n\n  /**\n   * Render provided data for the template in the given element.\n   * If SSR is supported, data is assumed to be from ssr() above.\n   * @param {!Element} element\n   * @param {(?JsonObject|string|undefined|!Array)} data\n   * @return {!Promise<(!Element|!Array<!Element>)>}\n   */\n  applySsrOrCsrTemplate(element, data) {\n    let renderTemplatePromise;\n    if (this.isEnabled()) {\n      userAssert(\n        typeof data['html'] === 'string',\n        'Skipping template rendering due to failed fetch'\n      );\n      renderTemplatePromise = this.assertTrustedViewer(element).then(() => {\n        return this.templates_.findAndSetHtmlForTemplate(\n          element,\n          /** @type {string} */ (data['html'])\n        );\n      });\n    } else if (isArray(data)) {\n      renderTemplatePromise = this.templates_.findAndRenderTemplateArray(\n        element,\n        /** @type {!Array} */ (data)\n      );\n    } else {\n      renderTemplatePromise = this.templates_.findAndRenderTemplate(\n        element,\n        /** @type {!JsonObject} */ (data)\n      );\n    }\n\n    return renderTemplatePromise;\n  }\n\n  /**\n   * @param {!FetchRequestDef} request\n   * @param {?Element|undefined} mustacheTemplate\n   * @param {?SsrTemplateDef=} opt_templates\n   * @param {!Object=} opt_attributes\n   * @return {!JsonObject}\n   * @private\n   */\n  buildPayload_(request, mustacheTemplate, opt_templates, opt_attributes = {}) {\n    const ampComponent = dict({'type': this.sourceComponent_});\n\n    const successTemplateKey = 'successTemplate';\n    const successTemplate =\n      opt_templates && opt_templates[successTemplateKey]\n        ? opt_templates[successTemplateKey]\n        : mustacheTemplate;\n    if (successTemplate) {\n      ampComponent[successTemplateKey] = {\n        'type': 'amp-mustache',\n        'payload': successTemplate./*REVIEW*/ innerHTML,\n      };\n    }\n\n    const errorTemplateKey = 'errorTemplate';\n    const errorTemplate =\n      opt_templates && opt_templates[errorTemplateKey]\n        ? opt_templates[errorTemplateKey]\n        : null;\n    if (errorTemplate) {\n      ampComponent[errorTemplateKey] = {\n        'type': 'amp-mustache',\n        'payload': errorTemplate./*REVIEW*/ innerHTML,\n      };\n    }\n\n    if (opt_attributes) {\n      Object.assign(ampComponent, opt_attributes);\n    }\n\n    const data = dict({\n      'originalRequest': toStructuredCloneable(\n        request.xhrUrl,\n        request.fetchOpt\n      ),\n      'ampComponent': ampComponent,\n    });\n\n    return data;\n  }\n}\n", "import {getValueForExpr} from '#core/types/object';\n\nimport {Services} from '#service';\n\nimport {user} from '#utils/log';\n\nimport {assertHttpsUrl} from './url';\n\n/**\n * Detail of each `options` property:\n * expr - Dot-syntax reference to subdata of JSON result to return. If not specified,\n *     entire JSON result is returned.\n * urlReplacement - If ALL, replaces all URL vars. If OPT_IN, replaces allowlisted\n *     URL vars. Otherwise, don't expand.\n * refresh - Forces refresh of browser cache.\n * xssiPrefix - Prefix to optionally strip from the response before calling parseJson.\n *\n * @typedef {{\n *  expr:(string|undefined),\n *  urlReplacement: (UrlReplacementPolicy|undefined),\n *  refresh: (boolean|undefined),\n *  xssiPrefix: (string|undefined),\n * }}\n */\nexport let BatchFetchOptionsDef;\n\n/**\n * @enum {number}\n */\nexport const UrlReplacementPolicy = {\n  NONE: 0,\n  OPT_IN: 1,\n  ALL: 2,\n};\n\n/**\n * Batch fetches the JSON endpoint at the given element's `src` attribute.\n * Sets the fetch credentials option from the element's `credentials` attribute,\n * if it exists.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {!Element} element\n * @param {!BatchFetchOptionsDef} options options bag for modifying the request.\n * @return {!Promise<!JsonObject|!Array<JsonObject>>} Resolved with JSON\n *     result or rejected if response is invalid.\n */\nexport function batchFetchJsonFor(ampdoc, element, options = {}) {\n  const {\n    expr = '.',\n    urlReplacement = UrlReplacementPolicy.NONE,\n    refresh = false,\n    xssiPrefix = undefined,\n  } = options;\n  assertHttpsUrl(element.getAttribute('src'), element);\n  const xhr = Services.batchedXhrFor(ampdoc.win);\n  return requestForBatchFetch(element, urlReplacement, refresh)\n    .then((data) => {\n      return xhr.fetchJson(data.xhrUrl, data.fetchOpt);\n    })\n    .then((res) => Services.xhrFor(ampdoc.win).xssiJson(res, xssiPrefix))\n    .then((data) => {\n      if (data == null) {\n        throw new Error('Response is undefined.');\n      }\n      return getValueForExpr(data, expr || '.');\n    })\n    .catch((err) => {\n      throw user().createError('failed fetching JSON data', err);\n    });\n}\n\n/**\n * Handles url replacement and constructs the FetchInitJsonDef required for a\n * fetch.\n * @param {!Element} element\n * @param {!UrlReplacementPolicy} replacement If ALL, replaces all URL\n *     vars. If OPT_IN, replaces allowlisted URL vars. Otherwise, don't expand.\n * @param {boolean} refresh Forces refresh of browser cache.\n * @return {!Promise<!FetchRequestDef>}\n */\nexport function requestForBatchFetch(element, replacement, refresh) {\n  const url = element.getAttribute('src');\n\n  // Replace vars in URL if desired.\n  const urlReplacements = Services.urlReplacementsForDoc(element);\n  const promise =\n    replacement >= UrlReplacementPolicy.OPT_IN\n      ? urlReplacements.expandUrlAsync(url)\n      : Promise.resolve(url);\n\n  return promise.then((xhrUrl) => {\n    // Throw user error if this element is performing URL substitutions\n    // without the soon-to-be-required opt-in (#12498).\n    if (replacement == UrlReplacementPolicy.OPT_IN) {\n      const invalid = urlReplacements.collectDisallowedVarsSync(element);\n      if (invalid.length > 0) {\n        throw user().createError(\n          'URL variable substitutions in CORS ' +\n            'fetches from dynamic URLs (e.g. via amp-bind) require opt-in. ' +\n            `Please add data-amp-replace=\"${invalid.join(' ')}\" to the ` +\n            `<${element.tagName}> element. See https://bit.ly/amp-var-subs.`\n        );\n      }\n    }\n    const fetchOpt = {};\n    if (element.hasAttribute('credentials')) {\n      fetchOpt.credentials = element.getAttribute('credentials');\n    }\n    // https://hacks.mozilla.org/2016/03/referrer-and-cache-control-apis-for-fetch/\n    if (refresh) {\n      fetchOpt.cache = 'reload';\n    }\n    return {'xhrUrl': xhrUrl, 'fetchOpt': fetchOpt};\n  });\n}\n", "import {internalListenImplementation} from '#core/dom/event-helper-listen';\nimport {lastChildElement} from '#core/dom/query';\nimport * as mode from '#core/mode';\n\nimport {user} from '#utils/log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/** @const {string} */\nexport const MEDIA_LOAD_FAILURE_SRC_PROPERTY = '__AMP_MEDIA_LOAD_FAILURE_SRC';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (mode.isEsm() || typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n      type,\n      !!eventInit.bubbles,\n      !!eventInit.cancelable,\n      detail\n    );\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n    element,\n    eventType,\n    listener,\n    opt_evtListenerOpts\n  );\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(\n    element,\n    eventType,\n    (event) => {\n      try {\n        localListener(event);\n      } finally {\n        // Ensure listener is GC'd\n        localListener = null;\n        unlisten();\n      }\n    },\n    opt_evtListenerOpts\n  );\n  return unlisten;\n}\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(\n  element,\n  eventType,\n  opt_evtListenerOpts,\n  opt_cancel\n) {\n  let unlisten;\n  const eventPromise = new Promise((resolve) => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(\n    eleOrWindow.complete ||\n    eleOrWindow.readyState == 'complete' ||\n    (isHTMLMediaElement(eleOrWindow) && eleOrWindow.readyState > 0) ||\n    // If the passed in thing is a Window, infer loaded state from\n    //\n    (eleOrWindow.document && eleOrWindow.document.readyState == 'complete')\n  );\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const isMediaElement = isHTMLMediaElement(eleOrWindow);\n  if (\n    isMediaElement &&\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] === eleOrWindow.currentSrc\n  ) {\n    return Promise.reject(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    if (isMediaElement) {\n      // The following event can be triggered by the media or one of its\n      // sources. Using capture is required as the media events do not bubble.\n      unlistenLoad = listenOnce(eleOrWindow, 'loadedmetadata', resolve, {\n        capture: true,\n      });\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // Don't unlisten on error for Windows.\n    if (!eleOrWindow.tagName) {\n      return;\n    }\n    let errorTarget = eleOrWindow;\n    // If the media element has no `src`, it will try to load the sources in\n    // document order. If the last source errors, then the media element\n    // loading errored.\n    if (isMediaElement && !eleOrWindow.hasAttribute('src')) {\n      errorTarget = lastChildElement(\n        eleOrWindow,\n        (child) => child.tagName === 'SOURCE'\n      );\n      if (!errorTarget) {\n        return reject(new Error('Media has no source.'));\n      }\n    }\n    unlistenError = listenOnce(errorTarget, 'error', reject);\n  });\n\n  return loadingPromise.then(\n    () => {\n      if (unlistenError) {\n        unlistenError();\n      }\n      return eleOrWindow;\n    },\n    () => {\n      if (unlistenLoad) {\n        unlistenLoad();\n      }\n      failedToLoad(eleOrWindow);\n    }\n  );\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Mark the element as errored since some elements - like HTMLMediaElement\n  // using HTMLSourceElement - do not provide any synchronous way to verify if\n  // they already errored, even though the error event was already dispatched.\n  if (isHTMLMediaElement(eleOrWindow)) {\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] =\n      eleOrWindow.currentSrc || true;\n  }\n\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if the parameter is a HTMLMediaElement.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nfunction isHTMLMediaElement(eleOrWindow) {\n  return eleOrWindow.tagName === 'AUDIO' || eleOrWindow.tagName === 'VIDEO';\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n", "import {devAssert} from '#core/assert';\n\n/**\n * Maps a value in a first range to its equivalent in a second range\n * Ex.: 5 in the range [0,10] gives 60 in the range[40,80]\n *\n * NOTE: lower/upper bounds on the source range are detected automatically,\n * however the bounds on the target range are not altered (thus the target\n * range could be decreasing).\n * Ex1: 8 in the range [0, 10] gives 2 in the range [10, 0]\n * Ex2: also, 8 in the range [10, 0] gives 2 in the range [10, 0]\n *\n * NOTE: Input value is enforced to be bounded inside the source range\n * Ex1: -2 in the range [0, 10] is interpreted as 0 and thus gives 40 in [40,80]\n * Ex2: 19 in the range [0, 5] is interpreted as 5 and thus gives 80 in [40,80]\n *\n * @param {number} val the value in the source range\n * @param {number} min1 the lower bound of the source range\n * @param {number} max1 the upper bound of the source range\n * @param {number} min2 the lower bound of the target range\n * @param {number} max2 the upper bound of the target range\n * @return {number} the equivalent value in the target range\n */\nexport function mapRange(val, min1, max1, min2, max2) {\n  let max1Bound = max1;\n  let min1Bound = min1;\n  if (min1 > max1) {\n    max1Bound = min1;\n    min1Bound = max1;\n  }\n\n  if (val < min1Bound) {\n    val = min1Bound;\n  } else if (val > max1Bound) {\n    val = max1Bound;\n  }\n\n  return ((val - min1) * (max2 - min2)) / (max1 - min1) + min2;\n}\n\n/**\n * Computes the modulus of values `a` and `b`.\n *\n * This is needed because the % operator in JavaScript doesn't implement\n * modulus behavior as can be seen by the spec here:\n * http://www.ecma-international.org/ecma-262/5.1/#sec-11.5.3.\n * It instead is used to obtain the remainder of a division.\n * This function uses the remainder (%) operator to determine the modulus.\n * Derived from here:\n * https://stackoverflow.com/questions/25726760/javascript-modular-arithmetic/47354356#47354356\n *\n * @param {number} a\n * @param {number} b\n * @return {number} returns the modulus of the two numbers.\n * @example\n *\n * _.min(10, 5);\n * // => 0\n *\n * _.mod(-1, 5);\n * // => 4\n */\nexport function mod(a, b) {\n  return a > 0 && b > 0 ? a % b : ((a % b) + b) % b;\n}\n\n/**\n * Restricts a number to be in the given min/max range. The minimum value must\n * be less than or equal to the maximum value.\n *\n * Examples:\n * clamp(0.5, 0, 1) -> 0.5\n * clamp(1.5, 0, 1) -> 1\n * clamp(-0.5, 0, 1) -> 0\n *\n * @param {number} val the value to clamp.\n * @param {number} min the lower bound.\n * @param {number} max the upper bound.\n * @return {number} the clamped value.\n */\nexport function clamp(val, min, max) {\n  devAssert(min <= max, 'Minimum value is greater than the maximum.');\n  return Math.min(Math.max(val, min), max);\n}\n\n/**\n * Returns value bound to min and max values +/- extent. The lower bound must\n * be less than or equal to the upper bound.\n * @param {number} val the value to bound.\n * @param {number} min the lower bound.\n * @param {number} max the upper bound\n * @param {number} extent the allowed extent beyond the bounds.\n * @return {number} the bounded value.\n */\nexport function boundValue(val, min, max, extent) {\n  devAssert(min <= max, 'Lower bound is greater than the upper bound.');\n  return clamp(val, min - extent, max + extent);\n}\n\n/**\n * Returns the length of a vector given in X- and Y-coordinates.\n * @param {number} deltaX distance in the X direction.\n * @param {number} deltaY distance in the Y direction.\n * @return {number} the magnitude of the vector.\n */\nexport function magnitude(deltaX, deltaY) {\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\n/**\n * Returns the distance between two points.\n * @param {number} x1 X-coordinate of the first point.\n * @param {number} y1 Y-coordinate of the first point.\n * @param {number} x2 X-coordinate of the second point.\n * @param {number} y2 Y-coordinate of the second point.\n * @return {number} the distance between the two points.\n */\nexport function distance(x1, y1, x2, y2) {\n  return magnitude(x2 - x1, y2 - y1);\n}\n\n/**\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} radius\n * @param {number} angleInDegrees\n * @return {{\n *  x: number,\n *  y: number,\n * }}\n */\nexport function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n}\n\n/**\n * Sums up the values of the given array and returns the result\n * @param {Array<number>} values\n * @return {number}\n */\nexport function sum(values) {\n  return values.reduce(function (a, b) {\n    return a + b;\n  });\n}\n", "// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {devAssert} from '#core/assert';\nimport {devError} from '#core/error';\nimport {map} from '#core/types/object';\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\nconst DISPLAY_STYLE_MESSAGE =\n  '`display` style detected. You must use toggle instead.';\n\nconst EMPTY_CSS_DECLARATION = /** @type {!CSSStyleDeclaration} */ ({\n  'getPropertyPriority': () => '',\n  'getPropertyValue': () => '',\n});\n\n/**\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n  Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (isVar(camelCase)) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  const {style} = element;\n  for (const k in styles) {\n    style.setProperty(\n      getVendorJsPropertyName(style, k),\n      String(styles[k]),\n      'important'\n    );\n  }\n}\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (!propertyName) {\n    return;\n  }\n  const styleValue = /** @type {string} */ (\n    opt_units ? value + opt_units : value\n  );\n  if (isVar(propertyName)) {\n    element.style.setProperty(propertyName, styleValue);\n  } else {\n    element.style[propertyName] = styleValue;\n  }\n}\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (!propertyName) {\n    return undefined;\n  }\n  if (isVar(propertyName)) {\n    return element.style.getPropertyValue(propertyName);\n  }\n  return element.style[propertyName];\n}\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n/**\n * Sets the initial display style of an element. This is a last resort. If you\n * can set the initial display using CSS, YOU MUST.\n * DO NOT USE THIS TO ARBITRARILY SET THE DISPLAY STYLE AFTER INITIAL SETUP.\n *\n * @param {!Element} el\n * @param {string} value\n */\nexport function setInitialDisplay(el, value) {\n  const {style} = el;\n  devAssert(\n    value !== '' && value !== 'none',\n    'Initial display value must not be \"none\". Use toggle instead.'\n  );\n  devAssert(\n    !style['display'],\n    'setInitialDisplay MUST NOT be used for ' +\n      'resetting the display style. If you are looking for display:none ' +\n      'toggling, use toggle instead.'\n  );\n  style['display'] = value;\n}\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = element.hasAttribute('hidden');\n  }\n  if (opt_display) {\n    element.removeAttribute('hidden');\n  } else {\n    element.setAttribute('hidden', '');\n  }\n}\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Coerces a number into a string with units.\n * @param {number|string} value\n * @param {function(number):string} fn\n * @return {string}\n */\nfunction units(value, fn) {\n  return typeof value == 'number' ? fn(value) : value;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  return `translateX(${units(value, px)})`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string|null)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  return opt_y === undefined || opt_y === null\n    ? `translate(${units(x, px)})`\n    : `translate(${units(x, px)}, ${units(opt_y, px)})`;\n}\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  return `rotate(${units(value, deg)})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n    /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g,\n    '($1,$2,$3, 1)'\n  );\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!CSSStyleDeclaration}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */ (win.getComputedStyle(el));\n  return style || EMPTY_CSS_DECLARATION;\n}\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  for (let i = 0; i < properties.length; i++) {\n    setStyle(element, properties[i], null);\n  }\n}\n\n/**\n * Propagates the object-fit/position element attributes as styles.\n * @param {!Element} fromEl ie: amp-img\n * @param {!Element} toEl ie: the img within amp-img\n */\nexport function propagateObjectFitStyles(fromEl, toEl) {\n  if (fromEl.hasAttribute('object-fit')) {\n    setStyle(toEl, 'object-fit', fromEl.getAttribute('object-fit'));\n  }\n\n  if (fromEl.hasAttribute('object-position')) {\n    setStyle(toEl, 'object-position', fromEl.getAttribute('object-position'));\n  }\n}\n\n/**\n * @param {string} property\n * @return {boolean}\n */\nfunction isVar(property) {\n  return property.startsWith('--');\n}\n\n/**\n * Asserts that the style is not the `display` style.\n * This is the only possible way to pass a dynamic style to setStyle.\n *\n * If you wish to set `display`, use the `toggle` helper instead. This is so\n * changes to display can trigger necessary updates. See #17475.\n *\n * @param {string} style\n * @return {string}\n */\nexport function assertNotDisplay(style) {\n  // TODO(rcebulko): This calls itself an assert, but doesn't throw an error.\n  // Should it throw sync? If so, this/below can reduce to\n  // `return devAssert(style == 'display', DISPLAY_STYLE_MESSAGE);`\n  if (style === 'display') {\n    devError('STYLE', DISPLAY_STYLE_MESSAGE);\n  }\n  return style;\n}\n\n/**\n * Asserts that the styles does not contain the `display` style.\n * This is the only possible way to pass a dynamic styles object to setStyles\n * and setImportantStyles.\n *\n * If you wish to set `display`, use the `toggle` helper instead. This is so\n * changes to display can trigger necessary updates. See #17475.\n *\n * @param {!Object<string, *>} styles\n * @return {!Object<string, *>}\n */\nexport function assertDoesNotContainDisplay(styles) {\n  if ('display' in styles) {\n    devError('STYLE', DISPLAY_STYLE_MESSAGE);\n  }\n  return styles;\n}\n", "import {ActionTrust} from '#core/constants/action-constants';\nimport {AutocompleteBindingDef} from './autocomplete-binding-def';\nimport {AutocompleteBindingInline} from './autocomplete-binding-inline';\nimport {AutocompleteBindingSingle} from './autocomplete-binding-single';\nimport {CSS} from '../../../build/amp-autocomplete-0.1.css';\nimport {Keys} from '#core/constants/key-codes';\nimport {Layout} from '#core/dom/layout';\nimport {Services} from '#service';\nimport {SsrTemplateHelper} from '../../../src/ssr-template-helper';\nimport {\n  UrlReplacementPolicy,\n  batchFetchJsonFor,\n  requestForBatchFetch,\n} from '../../../src/batched-json';\nimport {addParamToUrl} from '../../../src/url';\nimport {createCustomEvent} from '#utils/event-helper';\nimport {dev, user, userAssert} from '#utils/log';\nimport {\n  dict,\n  getValueForExpr,\n  hasOwn,\n  map,\n  ownProperty,\n} from '#core/types/object';\n\nimport {includes} from '#core/types/string';\nimport {isArray, isEnumValue} from '#core/types';\nimport {tryParseJson} from '#core/types/object/json';\n\nimport {mod} from '#core/math';\nimport {once} from '#core/types/function';\nimport {removeChildren, tryFocus} from '#core/dom';\nimport {setupAMPCors, setupInput, setupJsonFetchInit} from '#utils/xhr-utils';\nimport {toggle} from '#core/dom/style';\nimport fuzzysearch from '#third_party/fuzzysearch';\n\n/**\n * @typedef {{\n *   selectedObject: ?JsonObject,\n *   selectedText: ?string\n * }}\n */\n// eslint-disable-next-line no-unused-vars\nlet SelectionValues;\n\nconst TAG = 'amp-autocomplete';\n\n/**\n * Different filtering options.\n * @enum {string}\n */\nexport const FilterType = {\n  SUBSTRING: 'substring',\n  PREFIX: 'prefix',\n  TOKEN_PREFIX: 'token-prefix',\n  FUZZY: 'fuzzy',\n  CUSTOM: 'custom',\n  NONE: 'none',\n};\n\nexport class AmpAutocomplete extends AMP.BaseElement {\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n\n    /** @private {AutocompleteBindingDef} */\n    this.binding_ = null;\n\n    /**\n     * The data extracted from the <script> tag optionally provided\n     * as a child. For use with static data.\n     * @private {?Array<!JsonObject|string>}\n     */\n    this.sourceData_ = null;\n\n    /**\n     * The reference to the <input> or <textarea> provided as a child.\n     * @private {?HTMLInputElement}\n     */\n    this.inputElement_ = null;\n\n    /**\n     * The partial user input used to generate suggestions.\n     * @private {string}\n     */\n    this.userInput_ = '';\n\n    /**\n     * The value of the \"filter\" attribute on <autocomplete>.\n     * @private {string}\n     */\n    this.filter_ = '';\n\n    /**\n     * The value of the \"min-characters\" attribute on <autocomplete>.\n     * @private {number}\n     */\n    this.minChars_ = 1;\n\n    /**\n     * The value of the \"max-items\" attribute on <autocomplete>.\n     * @private {?number}\n     */\n    this.maxItems_ = null;\n\n    /**\n     * If the \"suggest-first\" attribute is present on <autocomplete>.\n     */\n    this.shouldSuggestFirst_ = false;\n\n    /**\n     * Whether or not the \"Backspace\" key has recently been fired.\n     * Only used when \"suggest-first\" is present on amp-autocomplete.\n     *\n     * This is used in conjunction between the \"keydown\" and \"input\" events\n     * on the input element. The reason the inputHandler_() does not alone\n     * read the \"inputType\" on the \"input\" to make the same discernment is\n     * because that event property is not compatible in all browsers.\n     */\n    this.detectBackspace_ = false;\n\n    /**\n     * If the \"highlight-user-entry\" attribute is present on <autocomplete>.\n     */\n    this.highlightUserEntry_ = false;\n\n    /**\n     * The base value obtained from the \"src\" attribute on amp-autocomplete.\n     * Used for creating static network endpoints. See generateSrc_.\n     * @private {string}\n     */\n    this.srcBase_ = '';\n\n    /**\n     * The value of the \"query\" attribute on amp-autocomplete.\n     * @private {string}\n     */\n    this.queryKey_ = '';\n\n    /**\n     * The index of the active suggested item.\n     * @private {number}\n     */\n    this.activeIndex_ = -1;\n\n    /**\n     * The reference to the <div> of the active suggested item.\n     * @private {?Element}\n     */\n    this.activeElement_ = null;\n\n    /**\n     * The element id if present or random number.\n     * @private {number|string}\n     */\n    this.prefix_ = element.id ? element.id : Math.floor(Math.random() * 100);\n\n    /**\n     * The reference to the <div> that contains template-rendered children.\n     * @private {?Element}\n     */\n    this.container_ = null;\n\n    /** @private {boolean} */\n    this.fallbackDisplayed_ = false;\n\n    /**\n     * The developer specified value of the 'autocomplete' attribute on the\n     * <form> ancestor that contains <amp-autocomplete>. Used to reset the\n     * attribute on blurring the input field. 'on' by default, according to\n     * common browser practices.\n     * @private {?string}\n     */\n    this.initialAutocompleteAttr_ = null;\n\n    /** @private {?../../../src/service/template-impl.Templates} */\n    this.templates_ = null;\n\n    /**\n     * Whether a <template> or <script type=\"text/plain\"> tag is present.\n     * @private {boolean}\n     */\n    this.hasTemplate_ = false;\n\n    /**\n     * @const {function():!../../../src/ssr-template-helper.SsrTemplateHelper}\n     */\n    this.getSsrTemplateHelper = once(\n      () =>\n        new SsrTemplateHelper(\n          TAG,\n          Services.viewerForDoc(this.element),\n          this.templates_\n        )\n    );\n\n    /**\n     * Whether server-side rendering is required.\n     * @private {boolean}\n     */\n    this.isSsr_ = false;\n\n    /** @private {?../../../src/service/action-impl.ActionService} */\n    this.action_ = null;\n\n    /** @private {?../../../src/service/viewport/viewport-interface.ViewportInterface} */\n    this.viewport_ = null;\n\n    /** @private {boolean} */\n    this.hasFetchedInitialData_ = false;\n\n    /**\n     * To ensure that we provide an accessible experience,\n    * the suggestion container must have a unique ID.\n     * In case the autocomplete doesn't have an ID we use a\n     * random number to ensure uniqueness.\n     @private {number|string}\n     */\n    this.containerId_ = element.id\n      ? element.id\n      : Math.floor(Math.random() * 100) + '_AMP_content_';\n  }\n\n  /** @override */\n  buildCallback() {\n    this.templates_ = Services.templatesForDoc(this.element);\n    this.action_ = Services.actionServiceForDoc(this.element);\n    this.viewport_ = Services.viewportForDoc(this.element);\n\n    this.inputElement_ = this.getSingleInputOrTextarea_();\n    const inputType = this.inputElement_.getAttribute('type');\n    userAssert(\n      !this.inputElement_.hasAttribute('type') ||\n        inputType === 'text' ||\n        inputType === 'search',\n      '%s requires the \"type\" attribute to be \"text\" or \"search\" if present on <input>. %s',\n      TAG,\n      this.element\n    );\n    this.binding_ = this.createBinding_();\n\n    this.queryKey_ = this.element.getAttribute('query');\n    this.srcBase_ = this.element.getAttribute('src');\n\n    const jsonScript = this.element.querySelector(\n      'script[type=\"application/json\"]'\n    );\n    if (jsonScript) {\n      this.sourceData_ = this.getInlineData_(jsonScript);\n    } else if (!this.element.hasAttribute('src')) {\n      user().warn(\n        TAG,\n        'Expected a <script type=\"application/json\"> child or ' +\n          'a URL specified in \"src\".'\n      );\n    }\n\n    this.inputElement_.setAttribute('dir', 'auto');\n    this.inputElement_.setAttribute('aria-autocomplete', 'both');\n    this.inputElement_.setAttribute('role', 'textbox');\n    this.inputElement_.setAttribute('aria-controls', this.containerId_);\n    if (this.inputElement_.tagName === 'INPUT') {\n      this.element.setAttribute('role', 'combobox');\n      this.inputElement_.setAttribute('aria-multiline', 'false');\n    }\n    this.element.setAttribute('aria-haspopup', 'listbox');\n    this.element.setAttribute('aria-expanded', 'false');\n    this.element.setAttribute('aria-owns', this.containerId_);\n\n    const form = this.getFormOrNull_();\n    if (form && form.hasAttribute('autocomplete')) {\n      this.initialAutocompleteAttr_ = form.getAttribute('autocomplete');\n    }\n\n    // When SSR is supported, it is required.\n    this.isSsr_ = this.getSsrTemplateHelper().isEnabled();\n    this.hasTemplate_ = this.templates_.hasTemplate(\n      this.element,\n      'template, script[template]'\n    );\n    if (this.isSsr_) {\n      userAssert(\n        this.srcBase_,\n        '%s requires data to be provided via \"src\" attribute for server-side rendering. %s',\n        TAG,\n        this.element\n      );\n      userAssert(\n        this.hasTemplate_,\n        `${TAG} should provide a <template> or <script type=\"plain/text\"> element.`\n      );\n      userAssert(\n        !this.element.hasAttribute('filter'),\n        `${TAG} does not support client-side filter when server-side render is required.`\n      );\n    }\n    this.filter_ = this.element.getAttribute('filter') || FilterType.NONE;\n    userAssert(\n      isEnumValue(FilterType, this.filter_),\n      'Unexpected filter: %s. %s',\n      this.filter_,\n      this.element\n    );\n\n    // Read configuration attributes\n    this.minChars_ = this.element.hasAttribute('min-characters')\n      ? parseInt(this.element.getAttribute('min-characters'), 10)\n      : 1;\n    if (this.element.hasAttribute('max-entries')) {\n      user().warn(TAG, '\"max-items\" attribute is preferred to \"max-entries\"');\n    }\n    const maxItems =\n      this.element.getAttribute('max-items') ||\n      this.element.getAttribute('max-entries');\n    this.maxItems_ = maxItems ? parseInt(maxItems, 10) : null;\n    this.shouldSuggestFirst_ = this.binding_.shouldSuggestFirst();\n    this.highlightUserEntry_ = this.element.hasAttribute(\n      'highlight-user-entry'\n    );\n\n    this.container_ = this.createContainer_();\n    this.element.appendChild(this.container_);\n\n    this.initializeListeners_();\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Initializes listeners for keydown, mousedown, focus, etc. events.\n   * @private\n   */\n  initializeListeners_() {\n    this.inputElement_.addEventListener(\n      'touchstart',\n      () => {\n        this.checkFirstInteractionAndMaybeFetchData_();\n      },\n      {passive: true}\n    );\n    this.inputElement_.addEventListener('input', () => {\n      this.inputHandler_();\n    });\n    this.inputElement_.addEventListener('keydown', (e) => {\n      this.keyDownHandler_(e);\n    });\n    this.inputElement_.addEventListener('focus', () => {\n      this.checkFirstInteractionAndMaybeFetchData_().then(() => {\n        const display = this.binding_.shouldShowOnFocus();\n        this.toggleResultsHandler_(display);\n      });\n    });\n    this.inputElement_.addEventListener('blur', () => {\n      this.toggleResultsHandler_(false);\n    });\n    this.container_.addEventListener('mousedown', (e) => {\n      this.selectHandler_(e);\n    });\n  }\n\n  /**\n   * amp-autocomplete expects exactly one nested input or textarea.\n   * @return {!HTMLInputElement}\n   */\n  getSingleInputOrTextarea_() {\n    const possibleElements = this.element.querySelectorAll('input,textarea');\n    userAssert(\n      possibleElements.length == 1,\n      '%s should contain exactly one <input> or <textarea> descendant %s',\n      TAG,\n      this.element\n    );\n    return /** @type {!HTMLInputElement} */ (possibleElements[0]);\n  }\n\n  /**\n   * @return {?HTMLFormElement}\n   */\n  getFormOrNull_() {\n    return this.inputElement_.form || null;\n  }\n\n  /**\n   * Creates a binding associated with singular autocomplete or\n   * inline autocomplete depending on the presence of the given element's \"inline\" attribute.\n   * @return {AutocompleteBindingDef}\n   */\n  createBinding_() {\n    return this.element.hasAttribute('inline')\n      ? new AutocompleteBindingInline(this)\n      : new AutocompleteBindingSingle(this);\n  }\n\n  /**\n   * Reads the 'items' data from the child <script> element.\n   * For use with static local data.\n   * @param {!Element} script\n   * @return {!Array<!JsonObject|string>}\n   * @private\n   */\n  getInlineData_(script) {\n    const json = tryParseJson(script.textContent, (error) => {\n      throw error;\n    });\n    const itemsExpr = this.element.getAttribute('items') || 'items';\n    const items = getValueForExpr(/**@type {!JsonObject}*/ (json), itemsExpr);\n    if (!items) {\n      user().warn(\n        TAG,\n        'Expected key \"%s\" in data but found nothing. Rendering empty results.',\n        itemsExpr\n      );\n      return [];\n    }\n    return user().assertArray(items);\n  }\n\n  /**\n   * Reads the 'items' data from the URL provided in the 'src' attribute.\n   * For use with remote data.\n   * @return {!Promise<!Array<string>>}\n   * @private\n   */\n  getRemoteData_() {\n    const ampdoc = this.getAmpDoc();\n    const policy = UrlReplacementPolicy.ALL;\n    const itemsExpr = this.element.getAttribute('items') || 'items';\n    this.maybeSetSrcFromInput_();\n    if (this.isSsr_) {\n      return requestForBatchFetch(\n        this.element,\n        policy,\n        /* refresh */ false\n      ).then((request) => {\n        request.xhrUrl = setupInput(this.win, request.xhrUrl, request.fetchOpt);\n        request.fetchOpt = setupAMPCors(\n          this.win,\n          request.xhrUrl,\n          request.fetchOpt\n        );\n        setupJsonFetchInit(request.fetchOpt);\n\n        const attributes = dict({\n          'ampAutocompleteAttributes': {\n            'items': itemsExpr,\n            'maxItems': this.maxItems_,\n          },\n        });\n        return this.getSsrTemplateHelper().ssr(\n          this.element,\n          request,\n          /* opt_templates */ null,\n          attributes\n        );\n      });\n    } else {\n      return batchFetchJsonFor(ampdoc, this.element, {\n        expr: itemsExpr,\n        urlReplacement: policy,\n      }).catch(() => {\n        user().warn(\n          TAG,\n          'Expected key \"%s\" in data but found nothing. Rendering empty results.',\n          itemsExpr\n        );\n        return [];\n      });\n    }\n  }\n\n  /**\n   * Update value of \"src\" attribute if the \"query\" attribute is provided.\n   */\n  maybeSetSrcFromInput_() {\n    if (!this.queryKey_) {\n      return;\n    }\n    const src = this.generateSrc_(this.userInput_);\n    this.element.setAttribute('src', src);\n  }\n\n  /**\n   * Takes the given input and returns the constructed server endpoint for it.\n   * For use when publishers provide \"src\" and \"query\" attributes.\n   * @param {string} opt_query\n   * @return {string}\n   * @private\n   */\n  generateSrc_(opt_query = '') {\n    return addParamToUrl(this.srcBase_, this.queryKey_, opt_query);\n  }\n\n  /**\n   * Creates and returns <div> that contains the template-rendered children.\n   * Should be called in a measureMutate context.\n   * @return {!Element}\n   * @private\n   */\n  createContainer_() {\n    const container = this.element.ownerDocument.createElement('div');\n    container.classList.add('i-amphtml-autocomplete-results');\n    if (this.shouldRenderAbove_()) {\n      container.classList.add('i-amphtml-autocomplete-results-up');\n    }\n    container.setAttribute('role', 'listbox');\n    container.setAttribute('id', this.containerId_);\n    toggle(container, false);\n    return container;\n  }\n\n  /** @override */\n  layoutCallback() {\n    // Disable autofill in browsers.\n    this.inputElement_.setAttribute('autocomplete', 'off');\n\n    if (this.element.hasAttribute('prefetch')) {\n      this.checkFirstInteractionAndMaybeFetchData_();\n    }\n\n    return this.autocomplete_(this.sourceData_, this.userInput_);\n  }\n\n  /** @override */\n  mutatedAttributesCallback(mutations) {\n    const src = mutations['src'];\n    if (src === undefined || src === null) {\n      return Promise.resolve();\n    }\n    if (typeof src === 'string') {\n      this.srcBase_ = src;\n      return this.getRemoteData_().then(\n        (remoteData) => {\n          this.sourceData_ = remoteData || [];\n          this.autocomplete_(this.sourceData_, this.userInput_);\n        },\n        (e) => {\n          this.displayFallback_(e);\n        }\n      );\n    }\n    if (typeof src === 'object') {\n      this.sourceData_ = src['items'] || [];\n      return this.autocomplete_(this.sourceData_, this.userInput_);\n    }\n    user().error(TAG, 'Unexpected \"src\" type: ' + src);\n  }\n\n  /**\n   * Create and return <div> element from given plan-text item.\n   * @param {string} item\n   * @param {string=} substring\n   * @return {!Element}\n   * @private\n   */\n  createElementFromItem_(item, substring = '') {\n    const element = this.element.ownerDocument.createElement('div');\n    element.classList.add('i-amphtml-autocomplete-item');\n    element.setAttribute('role', 'option');\n    element.setAttribute('data-value', item);\n    element.setAttribute('dir', 'auto');\n    element.textContent = item;\n    const text = element.childNodes[0];\n    const lowerCaseItem = item.toLocaleLowerCase();\n    const lowerCaseSubstring = substring.toLocaleLowerCase();\n    if (\n      this.highlightUserEntry_ &&\n      substring &&\n      substring.length <= item.length &&\n      includes(lowerCaseItem, lowerCaseSubstring)\n    ) {\n      const loc = lowerCaseItem.indexOf(lowerCaseSubstring);\n      const span = this.element.ownerDocument.createElement('span');\n      span.classList.add('autocomplete-partial');\n      span.appendChild(\n        this.element.ownerDocument.createTextNode(\n          // Preserve any capitalization from the original item.\n          item.slice(loc, loc + substring.length)\n        )\n      );\n      const textToRemove = text.splitText(loc);\n      textToRemove.splitText(substring.length);\n      element.replaceChild(span, textToRemove);\n    }\n    return element;\n  }\n\n  /**\n   * Displays autocomplete suggestions on user input if appropriate.\n   * @return {!Promise}\n   * @private\n   */\n  inputHandler_() {\n    if (\n      this.binding_.shouldAutocomplete(\n        /** @type {!HTMLInputElement} */ (\n          dev().assertElement(this.inputElement_)\n        )\n      )\n    ) {\n      return this.maybeFetchAndAutocomplete_();\n    }\n\n    return this.mutateElement(() => {\n      this.clearAllItems_();\n    });\n  }\n\n  /**\n   * First fetches if data is dynamic, then updates user input and\n   * displays autocomplete suggestions against it.\n   * @return {!Promise}\n   */\n  maybeFetchAndAutocomplete_() {\n    // If the input is the first entry in the field.\n    const isFirstInteraction =\n      this.userInput_.length === 0 && this.inputElement_.value.length === 1;\n    this.userInput_ = this.binding_.getUserInputForUpdate(\n      /** @type {!HTMLInputElement} */ (dev().assertElement(this.inputElement_))\n    );\n\n    // Fetch if autocomplete data is dynamic.\n    // Required when server-side rendering or otherwise relies on a query key.\n    const maybeFetch =\n      this.isSsr_ || this.queryKey_\n        ? this.getRemoteData_()\n        : Promise.resolve(this.sourceData_);\n    return maybeFetch.then((data) => {\n      this.sourceData_ = data;\n      return this.mutateElement(() => {\n        this.autocomplete_(this.sourceData_, this.userInput_).then(() => {\n          this.displaySuggestions_(isFirstInteraction);\n        });\n      });\n    });\n  }\n\n  /**\n   * Toggle the container of suggestions to show.\n   * If the publisher has opted to autosuggest the first option, do this as well.\n   * @param {boolean} isFirstInteraction\n   */\n  displaySuggestions_(isFirstInteraction) {\n    this.toggleResults_(true);\n\n    // Detecting backspace enables \"suggest-first\" to respect user deletion.\n    if (this.shouldSuggestFirst_) {\n      if (!this.detectBackspace_ || isFirstInteraction) {\n        this.updateActiveItem_(1);\n      }\n      this.detectBackspace_ = false;\n    }\n  }\n\n  /**\n   * Handle selecting items on user mousedown.\n   * @param {!Event} event\n   * @return {!Promise}\n   * @private\n   */\n  selectHandler_(event) {\n    const element = dev().assertElement(event.target);\n    const selectedElement = this.getItemElement_(element);\n    const {selectedObject, selectedText} =\n      this.updateAndGetElementSelections_(selectedElement);\n    return this.mutateElement(() => {\n      this.selectItem_(selectedText, selectedObject);\n    });\n  }\n\n  /**\n   * Display autocomplete suggestions and render it in the results container_.\n   * When client side rendering, filter the source data according to the given opt_input.\n   * @param {?Array<!JsonObject|string>} data\n   * @param {string} opt_input\n   * @return {!Promise}\n   * @private\n   */\n  autocomplete_(data, opt_input = '') {\n    this.clearAllItems_();\n    if (!data || opt_input.length < this.minChars_) {\n      return Promise.resolve();\n    }\n    if (this.isSsr_) {\n      return hasOwn(data, 'html')\n        ? this.renderResults_(\n            data,\n            dev().assertElement(this.container_),\n            opt_input\n          )\n        : Promise.resolve();\n    }\n    return this.filterDataAndRenderResults_(data, opt_input);\n  }\n\n  /**\n   * Client-side filter the source data according to the given opt_input\n   * and render it in the results container_.\n   * @param {?Array<!JsonObject|string>} sourceData\n   * @param {string} input\n   * @return {!Promise}\n   * @private\n   */\n  filterDataAndRenderResults_(sourceData, input) {\n    if (!sourceData.length) {\n      return Promise.resolve();\n    }\n    const filteredData = this.filterData_(sourceData, input);\n    const dataWithConverter = filteredData.map((item) => {\n      let itemWithConverter = item;\n      // Add a function that converts the object itself to a JSON string,\n      // to make it available in mustache templates.\n      // We add a function instead of the already stringified representation\n      // so that we only convert these objects when data-json is present in the DOM.\n      if (typeof item === 'object') {\n        itemWithConverter = {...item, objToJson: () => JSON.stringify(item)};\n      }\n      return itemWithConverter;\n    });\n    return this.renderResults_(\n      dataWithConverter,\n      dev().assertElement(this.container_),\n      input\n    );\n  }\n\n  /**\n   * Render the given data into item elements in the given container element.\n   * @param {!Array<!JsonObject|string>} filteredData\n   * @param {!Element} container\n   * @param {string} input\n   * @return {!Promise}\n   * @private\n   */\n  renderResults_(filteredData, container, input) {\n    let renderPromise = Promise.resolve();\n    this.resetActiveElement_();\n    if (this.hasTemplate_) {\n      renderPromise = this.getSsrTemplateHelper()\n        .applySsrOrCsrTemplate(this.element, filteredData)\n        .then((rendered) => {\n          const elements = isArray(rendered) ? rendered : [rendered];\n          elements.forEach((child) => {\n            if (child.hasAttribute('data-disabled')) {\n              child.setAttribute('aria-disabled', 'true');\n            } else if (!child.hasAttribute('data-value')) {\n              user().warn(\n                TAG,\n                'Expected a \"data-value\" or \"data-disabled\" attribute on the rendered template item. %s',\n                child\n              );\n            }\n            child.classList.add('i-amphtml-autocomplete-item');\n            child.setAttribute('role', 'option');\n            container.appendChild(child);\n          });\n        });\n    } else {\n      filteredData.forEach((item) => {\n        userAssert(\n          typeof item === 'string',\n          '%s data must provide template for non-string items. %s',\n          TAG,\n          this.element\n        );\n        container.appendChild(\n          this.createElementFromItem_(/** @type {string} */ (item), input)\n        );\n      });\n    }\n    return renderPromise;\n  }\n\n  /**\n   * Apply the filter to the given data based on the given input.\n   * @param {!Array<!JsonObject|string>} data\n   * @param {string} input\n   * @return {!Array<!JsonObject|string>}\n   * @private\n   */\n  filterData_(data, input) {\n    // Server-side filtering.\n    if (this.filter_ === FilterType.NONE) {\n      return this.truncateToMaxItems_(data);\n    }\n\n    // Client-side filtering.\n    input = input.toLocaleLowerCase();\n    const itemsExpr = this.element.getAttribute('filter-value') || 'value';\n    const filteredData = data.filter((item) => {\n      if (typeof item === 'object') {\n        item = getValueForExpr(/** @type {!JsonObject} */ (item), itemsExpr);\n      }\n      userAssert(\n        typeof item === 'string',\n        '%s data property \"%s\" must map to string type. %s',\n        TAG,\n        itemsExpr,\n        this.element\n      );\n      item = item.toLocaleLowerCase();\n      switch (this.filter_) {\n        case FilterType.SUBSTRING:\n          return includes(item, input);\n        case FilterType.PREFIX:\n          return item.startsWith(input);\n        case FilterType.TOKEN_PREFIX:\n          return this.tokenPrefixMatch_(item, input);\n        case FilterType.FUZZY:\n          return fuzzysearch(input, item);\n        case FilterType.CUSTOM:\n          throw new Error(\n            'Filter not yet supported: %s',\n            this.filter_,\n            this.element\n          );\n        default:\n          throw new Error('Unexpected filter: %s', this.filter_, this.element);\n      }\n    });\n\n    return this.truncateToMaxItems_(filteredData);\n  }\n\n  /**\n   * Returns true if the given input string is a token-prefix match on the\n   * given item string. Assumes toLocaleLowerCase() has been performed on both\n   * parameters.\n   *\n   * Matches:\n   * washington dc, dc\n   * washington dc, wash\n   * washington dc, dc washington\n   * new york ny, new york\n   *\n   * Non-matches:\n   * washington dc, district of columbia\n   * washington dc, washington d c\n   * washington dc, ashington dc\n   *\n   * @param {string} item\n   * @param {string} input\n   * @return {boolean}\n   * @private\n   */\n  tokenPrefixMatch_(item, input) {\n    if (input === '') {\n      return true;\n    }\n\n    const itemTokens = this.tokenizeString_(item);\n    const inputTokens = this.tokenizeString_(input);\n\n    // Match each input token (except the last one) to an item token\n    const itemTokensMap = this.mapFromTokensArray_(itemTokens);\n    const lastInputToken = inputTokens[inputTokens.length - 1];\n    inputTokens.splice(inputTokens.length - 1, 1);\n    let match = true;\n    for (let i = 0; i < inputTokens.length; i++) {\n      const token = inputTokens[i];\n      if (token === '') {\n        continue;\n      }\n      if (!hasOwn(itemTokensMap, token)) {\n        match = false;\n        break;\n      }\n      const count = Number(ownProperty(itemTokensMap, token));\n      if (count > 1) {\n        itemTokensMap[token] = count - 1;\n      } else {\n        delete itemTokensMap[token];\n      }\n    }\n\n    // Return that the last input token is a prefix of one of the item tokens\n    const remainingItemTokens = Object.keys(itemTokensMap);\n    return (\n      match &&\n      (lastInputToken === '' ||\n        remainingItemTokens.some((itemToken) => {\n          return itemToken.startsWith(lastInputToken);\n        }))\n    );\n  }\n\n  /**\n   * Takes a string, removes '.', and splits by special characters.\n   * Returns the resulting array of tokens.\n   * @param {string} inputStr\n   * @return {!Array<string>}\n   * @private\n   */\n  tokenizeString_(inputStr) {\n    inputStr = inputStr.replace(/[\\.]+/g, '');\n    return inputStr.split(/[`~(){}_|+\\-;:\\'\",\\[\\]\\\\\\/ ]+/g);\n  }\n\n  /**\n   * Returns the given tokens array as a dictionary of key: token (str) and\n   * value: number of occurrences.\n   * @param {!Array<string>} tokens\n   * @return {!Object<string, number>}\n   * @private\n   */\n  mapFromTokensArray_(tokens) {\n    const tokensMap = map();\n    tokens.forEach((token) => {\n      const count = hasOwn(tokensMap, token)\n        ? ownProperty(tokensMap, token) + 1\n        : 1;\n      tokensMap[token] = count;\n    });\n    return tokensMap;\n  }\n\n  /**\n   * Truncate the given data to a maximum length of the max-items attribute.\n   * @param {!Array<!JsonObject|string>} data\n   * @return {!Array<!JsonObject|string>}\n   * @private\n   */\n  truncateToMaxItems_(data) {\n    if (this.maxItems_ && this.maxItems_ < data.length) {\n      data = data.slice(0, this.maxItems_);\n    }\n    return data;\n  }\n\n  /**\n   * Shows or hides the results container_.\n   * @param {boolean} display\n   * @private\n   */\n  toggleResults_(display) {\n    this.inputElement_.setAttribute('aria-expanded', display);\n    toggle(dev().assertElement(this.container_), display);\n  }\n\n  /**\n   * Disables or re-enables the browser autofill on the autocomplete input.\n   * Then handles showing or hiding results on user focus/blur.\n   * @param {boolean} display\n   * @return {!Promise}\n   * @private\n   */\n  toggleResultsHandler_(display) {\n    // Set/reset \"autocomplete\" attribute on <form> ancestor if present.\n    const form = this.getFormOrNull_();\n    if (form) {\n      if (display) {\n        form.setAttribute('autocomplete', 'off');\n      } else if (this.initialAutocompleteAttr_) {\n        form.setAttribute('autocomplete', this.initialAutocompleteAttr_);\n      } else {\n        form.removeAttribute('autocomplete');\n      }\n    }\n\n    // Toggle results.\n    let renderAbove = false;\n    return this.measureMutateElement(\n      () => {\n        renderAbove = this.shouldRenderAbove_();\n      },\n      () => {\n        if (!display) {\n          this.userInput_ = this.inputElement_.value;\n          this.autocomplete_(this.sourceData_, this.userInput_);\n          this.resetActiveElement_();\n        }\n        this.setResultDisplayDirection_(renderAbove);\n        this.toggleResults_(display);\n      }\n    );\n  }\n\n  /**\n   * Requests remote data source, if provided, on first user interaction.\n   * @return {!Promise}\n   * @private\n   */\n  checkFirstInteractionAndMaybeFetchData_() {\n    if (this.hasFetchedInitialData_ || !this.element.hasAttribute('src')) {\n      return Promise.resolve();\n    }\n    this.hasFetchedInitialData_ = true;\n    return this.getRemoteData_().then(\n      (remoteData) => {\n        this.sourceData_ = remoteData;\n        this.autocomplete_(this.sourceData_);\n      },\n      (e) => {\n        this.displayFallback_(e);\n      }\n    );\n  }\n\n  /**\n   * Display results upwards or downwards based on location in the viewport.\n   * Should be called in a measureMutate context.\n   * @param {boolean} renderAbove\n   * @private\n   */\n  setResultDisplayDirection_(renderAbove) {\n    this.container_.classList.toggle(\n      'i-amphtml-autocomplete-results-up',\n      renderAbove\n    );\n  }\n\n  /**\n   * Returns true if the input is in the bottom half of the viewport.\n   * Should be called in a measureMutate context.\n   * @return {boolean}\n   * @private\n   */\n  shouldRenderAbove_() {\n    const viewHeight = this.viewport_.getHeight() || 0;\n    return (\n      this.inputElement_./*OK*/ getBoundingClientRect().top > viewHeight / 2\n    );\n  }\n\n  /**\n   * Returns true if the results are visible and has items.\n   * @return {boolean}\n   * @private\n   */\n  areResultsDisplayed_() {\n    return (\n      !this.container_.hasAttribute('hidden') &&\n      this.container_.children.length > 0\n    );\n  }\n\n  /**\n   * Returns the nearest ancestor element that is a suggested item.\n   * @param {?Element} element\n   * @return {?Element}\n   * @private\n   */\n  getItemElement_(element) {\n    if (element === null) {\n      return null;\n    }\n    if (element.classList.contains('i-amphtml-autocomplete-item')) {\n      return element;\n    }\n    return this.getItemElement_(element.parentElement);\n  }\n\n  /**\n   * Updates the input value field with the textual representation of the selected element\n   * and returns an object containing both the textual representation of the selected element\n   * as well as its object representation, if available.\n   * @param {?Element} element Element selected by the user\n   * @return {!SelectionValues}\n   * @private\n   */\n  updateAndGetElementSelections_(element) {\n    if (element === null || element.hasAttribute('data-disabled')) {\n      return /** @type {!SelectionValues} */ ({\n        selectedObject: null,\n        selectedText: null,\n      });\n    }\n\n    const selectedText = this.getSelectedTextValue_(element);\n    this.setInputValue_(selectedText);\n    const selectedObject = this.getSelectedObjectValue_(element);\n    return /** @type {!SelectionValues} */ ({selectedObject, selectedText});\n  }\n\n  /**\n   * Updates the input value with the provided textual representation of the selected element.\n   * @param {string} selectedText textual representation of the selected element\n   * @private\n   */\n  setInputValue_(selectedText) {\n    this.inputElement_.value = this.binding_.getUserInputForUpdateWithSelection(\n      selectedText,\n      this.inputElement_,\n      this.userInput_\n    );\n    this.userInput_ = this.binding_.getUserInputForUpdate(this.inputElement_);\n  }\n\n  /**\n   * Gets the textual representation of the selected element.\n   * @param {!Element} element\n   * @return {string}\n   * @private\n   */\n  getSelectedTextValue_(element) {\n    return element.getAttribute('data-value') || element.textContent || '';\n  }\n\n  /**\n   * Returns the object representation of the selected element.\n   * @param {!Element} element\n   * @return {?JsonObject}\n   * @private\n   */\n  getSelectedObjectValue_(element) {\n    if (!element.hasAttribute('data-json')) {\n      return null;\n    }\n\n    return tryParseJson(element.getAttribute('data-json'), (error) => {\n      throw error;\n    });\n  }\n\n  /**\n   * Finish item selection with the selected value.\n   * @param {?string} selectedText Textual representation of the selected value\n   * @param {?JsonObject} selectedObject Object representation of the selected value\n   * @private\n   */\n  selectItem_(selectedText, selectedObject) {\n    if (selectedText === null) {\n      return;\n    }\n    this.fireSelectAndChangeEvents_(selectedText, selectedObject);\n    this.clearAllItems_();\n    this.toggleResults_(false);\n  }\n\n  /**\n   * Triggers select event on amp-autocomplete element and change events (bind\n   * and native, for amp-script) on child input/textarea with the given value\n   * as the value emitted.\n   * @param {string} selectedText Textual representation of the selected value\n   * @param {?JsonObject} selectedObject Object representation of the selected value\n   * @private\n   */\n  fireSelectAndChangeEvents_(selectedText, selectedObject) {\n    const selectName = 'select';\n    const eventValue = /** @type {!JsonObject} */ ({\n      value: selectedText,\n      ...(selectedObject && {valueAsObject: selectedObject}),\n    });\n    const selectEvent = createCustomEvent(\n      this.win,\n      `amp-autocomplete.${selectName}`,\n      eventValue\n    );\n    this.action_.trigger(\n      this.element,\n      selectName,\n      selectEvent,\n      ActionTrust.HIGH\n    );\n\n    // Ensure native change listeners are triggered\n    const nativeChangeEvent = createCustomEvent(\n      this.win,\n      'change',\n      eventValue,\n      {bubbles: true}\n    );\n    this.inputElement_.dispatchEvent(nativeChangeEvent);\n  }\n\n  /**\n   * Given a delta between the current active item and the desired active item,\n   * marks the desired active item as active. Loops to the beginning.\n   * @param {number} delta\n   * @return {!Promise}\n   * @private\n   */\n  updateActiveItem_(delta) {\n    if (\n      delta === 0 ||\n      !this.areResultsDisplayed_() ||\n      this.fallbackDisplayed_\n    ) {\n      return Promise.resolve();\n    }\n    // Active element logic\n    const keyUpWhenNoneActive = this.activeIndex_ === -1 && delta < 0;\n    const index = keyUpWhenNoneActive ? delta : this.activeIndex_ + delta;\n    const enabledElements = this.getEnabledItems_();\n    if (enabledElements.length === 0) {\n      return Promise.resolve();\n    }\n    const activeIndex = mod(index, enabledElements.length);\n    const newActiveElement = enabledElements[activeIndex];\n    const newValue = newActiveElement.getAttribute('data-value');\n\n    this.binding_.displayActiveItemInInput(\n      /** @type {!HTMLInputElement} */ (\n        dev().assertElement(this.inputElement_)\n      ),\n      newValue,\n      this.userInput_\n    );\n\n    // Element visibility logic\n    let shouldScroll, newTop;\n\n    return this.measureMutateElement(\n      () => {\n        const {offsetHeight: itemHeight, offsetTop: itemTop} = newActiveElement;\n        const {offsetHeight: resultHeight, scrollTop: resultTop} =\n          this.container_;\n        shouldScroll =\n          resultTop > itemTop ||\n          resultTop + resultHeight < itemTop + itemHeight;\n        newTop = delta > 0 ? itemTop + itemHeight - resultHeight : itemTop;\n      },\n      () => {\n        if (shouldScroll) {\n          this.container_./*OK*/ scrollTop = newTop;\n        }\n        this.resetActiveElement_();\n        newActiveElement.classList.add('i-amphtml-autocomplete-item-active');\n        newActiveElement.setAttribute('aria-selected', 'true');\n        let elementId = newActiveElement.getAttribute('id');\n        if (!elementId) {\n          // To ensure that we pass Accessibility audits -\n          // we need to make sure that each item element has a unique ID.\n          // In case the autocomplete doesn't have an ID we use a\n          // random number to ensure uniqueness.\n          elementId = this.prefix_ + '_AMP_content_' + activeIndex;\n          newActiveElement.setAttribute('id', elementId);\n        }\n        this.inputElement_.setAttribute('aria-activedescendant', elementId);\n        this.activeIndex_ = activeIndex;\n        this.activeElement_ = newActiveElement;\n        tryFocus(dev().assertElement(this.activeElement_));\n      }\n    );\n  }\n\n  /** Returns all item elements in the results container that do not have the\n   * 'data-disabled' attribute.\n   * @return {!NodeList}\n   * @private\n   */\n  getEnabledItems_() {\n    return this.container_.querySelectorAll(\n      '.i-amphtml-autocomplete-item:not([data-disabled])'\n    );\n  }\n\n  /**\n   * Displays the user's partial input in the input field.\n   * @private\n   */\n  displayUserInput_() {\n    this.binding_.resetInputOnWrapAround(\n      this.userInput_,\n      /** @type {!HTMLInputElement} */ (dev().assertElement(this.inputElement_))\n    );\n    this.resetActiveElement_();\n  }\n\n  /**\n   * Resets the activeIndex_, activeElement_ and removes its 'active' class.\n   * Should be called in a measureMutate context.\n   * @private\n   */\n  resetActiveElement_() {\n    if (!this.activeElement_) {\n      return;\n    }\n    this.activeElement_.classList.toggle(\n      'i-amphtml-autocomplete-item-active',\n      false\n    );\n    this.activeElement_.removeAttribute('aria-selected');\n    if (this.activeElement_.getAttribute('id') === 'autocomplete-selected') {\n      this.activeElement_.removeAttribute('id');\n    }\n    this.inputElement_.removeAttribute('aria-activedescendent');\n    this.activeElement_ = null;\n    this.activeIndex_ = -1;\n  }\n\n  /**\n   * Delete all children to the container_\n   * @private\n   */\n  clearAllItems_() {\n    this.fallbackDisplayed_ = false;\n    removeChildren(dev().assertElement(this.container_));\n  }\n\n  /**\n   * Handles keyboard events.\n   * @param {!Event} event\n   * @return {!Promise}\n   * @private\n   */\n  keyDownHandler_(event) {\n    switch (event.key) {\n      case Keys.DOWN_ARROW:\n        event.preventDefault();\n        if (this.areResultsDisplayed_()) {\n          // Disrupt loop around to display user input.\n          if (this.activeIndex_ === this.getEnabledItems_().length - 1) {\n            this.displayUserInput_();\n            return Promise.resolve();\n          }\n          return this.updateActiveItem_(1);\n        }\n        return this.mutateElement(() => {\n          this.autocomplete_(this.sourceData_, this.userInput_);\n          this.toggleResults_(true);\n        });\n      case Keys.UP_ARROW:\n        event.preventDefault();\n        // Disrupt loop around to display user input.\n        if (this.activeIndex_ === 0) {\n          this.displayUserInput_();\n          return Promise.resolve();\n        }\n        return this.updateActiveItem_(-1);\n      case Keys.ENTER:\n        const shouldPreventDefault = this.binding_.shouldPreventDefaultOnEnter(\n          !!this.activeElement_\n        );\n        if (this.areResultsDisplayed_() && shouldPreventDefault) {\n          event.preventDefault();\n        }\n        this.binding_.removeSelectionHighlighting(this.inputElement_);\n        if (this.areResultsDisplayed_() && this.activeElement_) {\n          const {selectedObject, selectedText} =\n            this.updateAndGetElementSelections_(this.activeElement_);\n          return this.mutateElement(() => {\n            this.selectItem_(selectedText, selectedObject);\n            this.resetActiveElement_();\n          });\n        }\n        return this.mutateElement(() => {\n          this.toggleResults_(false);\n        });\n      case Keys.ESCAPE:\n        // Select user's partial input and hide results.\n        return this.mutateElement(() => {\n          if (!this.fallbackDisplayed_) {\n            event.preventDefault();\n            this.displayUserInput_();\n            this.toggleResults_(false);\n          }\n        });\n      case Keys.TAB:\n        if (this.areResultsDisplayed_() && this.activeElement_) {\n          event.preventDefault();\n          const {selectedObject, selectedText} =\n            this.updateAndGetElementSelections_(this.activeElement_);\n          return this.mutateElement(() => {\n            this.selectItem_(selectedText, selectedObject);\n          });\n        }\n        return Promise.resolve();\n      case Keys.BACKSPACE:\n        this.detectBackspace_ = this.shouldSuggestFirst_;\n        return Promise.resolve();\n      default:\n        return Promise.resolve();\n    }\n  }\n\n  /**\n   * If a fallback element is provided, displays it instead of suggestions.\n   * Otherwise, throws given error. Must be called in a mutate context.\n   * @param {*=} error\n   * @throws {!Error} If fallback element is not present.\n   * @private\n   */\n  displayFallback_(error) {\n    if (this.fallbackDisplayed_) {\n      return;\n    }\n    this.clearAllItems_();\n    const fallback = this.getFallback();\n    if (fallback) {\n      this.fallbackDisplayed_ = true;\n      this.toggleFallback(true);\n    } else {\n      throw error;\n    }\n  }\n\n  /** @override */\n  isLayoutSupported(layout) {\n    return layout == Layout.CONTAINER;\n  }\n}\n\nAMP.extension(TAG, '0.1', (AMP) => {\n  AMP.registerElement(TAG, AmpAutocomplete, CSS);\n});\n"],
  "mappings": "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",
  "names": []
}
